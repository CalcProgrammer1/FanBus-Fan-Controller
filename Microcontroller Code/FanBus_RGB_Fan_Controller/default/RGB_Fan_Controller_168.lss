
RGB_Fan_Controller_168.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000006a2  00000736  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000071  00800102  00800102  00000738  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000024c  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c9  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000422  00000000  00000000  000011ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008bf  00000000  00000000  0000160f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00001ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e5  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012d  00000000  00000000  00002325  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002452  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 39 02 	jmp	0x472	; 0x472 <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c0 02 	jmp	0x580	; 0x580 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ea       	ldi	r30, 0xA2	; 162
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 37       	cpi	r26, 0x73	; 115
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 4f 03 	jmp	0x69e	; 0x69e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

extern char compbuff[12];
extern char update;

int main()
{
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	00 d0       	rcall	.+0      	; 0xb4 <main+0xe>
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  unsigned char save = 0;
  b8:	19 82       	std	Y+1, r1	; 0x01
  unsigned char restore = 0;
  ba:	1a 82       	std	Y+2, r1	; 0x02
  unsigned char old_fanbus_address;

  //Initialize LED's and Fan
  setupLEDs();
  bc:	0e 94 13 01 	call	0x226	; 0x226 <setupLEDs>
  setupFan();
  c0:	0e 94 05 02 	call	0x40a	; 0x40a <setupFan>
  setupFanRPMCount();
  c4:	0e 94 1e 02 	call	0x43c	; 0x43c <setupFanRPMCount>

  //Read FanBus address from EEPROM
  fanbus_address = eeprom_read_byte((unsigned char *)(14));
  c8:	8e e0       	ldi	r24, 0x0E	; 14
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 39 03 	call	0x672	; 0x672 <__eerd_byte_m168>
  d0:	68 2f       	mov	r22, r24
  d2:	80 93 00 01 	sts	0x0100, r24

  //Make sure address is valid
  if(fanbus_address == 0x00 || fanbus_address == 0x01 || fanbus_address == 0x02 || fanbus_address == 0xFF)
  d6:	83 50       	subi	r24, 0x03	; 3
  d8:	8c 3f       	cpi	r24, 0xFC	; 252
  da:	20 f0       	brcs	.+8      	; 0xe4 <main+0x3e>
  {
  	//If address is invalid, set it to 0xAA (default address)
  	fanbus_address == 0xAA;
	eeprom_write_byte((unsigned char *)(14), fanbus_address);
  dc:	8e e0       	ldi	r24, 0x0E	; 14
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 41 03 	call	0x682	; 0x682 <__eewr_byte_m168>
  }

  old_fanbus_address = fanbus_address;
  e4:	e0 90 00 01 	lds	r14, 0x0100

  fanbus_init(12); 		//38400 baud
  e8:	8c e0       	ldi	r24, 0x0C	; 12
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 1c 03 	call	0x638	; 0x638 <fanbus_init>

  //Set pointers to LED and Fan Registers
  fanbus_register_buffer[0x00] = &fanbus_address;
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	90 93 34 01 	sts	0x0134, r25
  f8:	80 93 33 01 	sts	0x0133, r24
  fanbus_register_buffer[0x01] = getFanSpeedPointer();
  fc:	0e 94 18 02 	call	0x430	; 0x430 <getFanSpeedPointer>
 100:	90 93 36 01 	sts	0x0136, r25
 104:	80 93 35 01 	sts	0x0135, r24
  fanbus_register_buffer[0x02] = (unsigned char *)(getFanRPMPointer());
 108:	0e 94 1b 02 	call	0x436	; 0x436 <getFanRPMPointer>
 10c:	90 93 38 01 	sts	0x0138, r25
 110:	80 93 37 01 	sts	0x0137, r24
  fanbus_register_buffer[0x03] = (unsigned char *)(getFanRPMPointer()+1);
 114:	0e 94 1b 02 	call	0x436	; 0x436 <getFanRPMPointer>
 118:	02 96       	adiw	r24, 0x02	; 2
 11a:	90 93 3a 01 	sts	0x013A, r25
 11e:	80 93 39 01 	sts	0x0139, r24
  
  fanbus_register_buffer[0x0A] = &save;
 122:	ce 01       	movw	r24, r28
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	90 93 48 01 	sts	0x0148, r25
 12a:	80 93 47 01 	sts	0x0147, r24
  fanbus_register_buffer[0x0B] = &restore;
 12e:	ce 01       	movw	r24, r28
 130:	02 96       	adiw	r24, 0x02	; 2
 132:	90 93 4a 01 	sts	0x014A, r25
 136:	80 93 49 01 	sts	0x0149, r24
  fanbus_register_buffer[0x0C] = &update;  
 13a:	85 e0       	ldi	r24, 0x05	; 5
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	90 93 4c 01 	sts	0x014C, r25
 142:	80 93 4b 01 	sts	0x014B, r24

  fanbus_register_buffer[0x10] = &compbuff[0];
 146:	89 e0       	ldi	r24, 0x09	; 9
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	90 93 54 01 	sts	0x0154, r25
 14e:	80 93 53 01 	sts	0x0153, r24
  fanbus_register_buffer[0x11] = &compbuff[1];
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	90 93 56 01 	sts	0x0156, r25
 158:	80 93 55 01 	sts	0x0155, r24
  fanbus_register_buffer[0x12] = &compbuff[2];
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	90 93 58 01 	sts	0x0158, r25
 162:	80 93 57 01 	sts	0x0157, r24
  fanbus_register_buffer[0x13] = &compbuff[3];
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	90 93 5a 01 	sts	0x015A, r25
 16c:	80 93 59 01 	sts	0x0159, r24
  fanbus_register_buffer[0x14] = &compbuff[4];
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	90 93 5c 01 	sts	0x015C, r25
 176:	80 93 5b 01 	sts	0x015B, r24
  fanbus_register_buffer[0x15] = &compbuff[5];
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	90 93 5e 01 	sts	0x015E, r25
 180:	80 93 5d 01 	sts	0x015D, r24
  fanbus_register_buffer[0x16] = &compbuff[6];
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	90 93 60 01 	sts	0x0160, r25
 18a:	80 93 5f 01 	sts	0x015F, r24
  fanbus_register_buffer[0x17] = &compbuff[7];
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	90 93 62 01 	sts	0x0162, r25
 194:	80 93 61 01 	sts	0x0161, r24
  fanbus_register_buffer[0x18] = &compbuff[8];
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	90 93 64 01 	sts	0x0164, r25
 19e:	80 93 63 01 	sts	0x0163, r24
  fanbus_register_buffer[0x19] = &compbuff[9];
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	90 93 66 01 	sts	0x0166, r25
 1a8:	80 93 65 01 	sts	0x0165, r24
  fanbus_register_buffer[0x1A] = &compbuff[10];
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	90 93 68 01 	sts	0x0168, r25
 1b2:	80 93 67 01 	sts	0x0167, r24
  fanbus_register_buffer[0x1B] = &compbuff[11];
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	90 93 6a 01 	sts	0x016A, r25
 1bc:	80 93 69 01 	sts	0x0169, r24
    
  startUp();
 1c0:	0e 94 96 02 	call	0x52c	; 0x52c <startUp>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1c4:	08 ec       	ldi	r16, 0xC8	; 200
 1c6:	10 e0       	ldi	r17, 0x00	; 0
 1c8:	28 ee       	ldi	r18, 0xE8	; 232
 1ca:	33 e0       	ldi	r19, 0x03	; 3
 1cc:	c8 01       	movw	r24, r16
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0x128>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d6:	d1 f7       	brne	.-12     	; 0x1cc <main+0x126>
  while(1)
  {
	_delay_ms(100);

	//Check for address updates
    if(old_fanbus_address != fanbus_address)
 1d8:	f0 90 00 01 	lds	r15, 0x0100
 1dc:	ef 14       	cp	r14, r15
 1de:	61 f0       	breq	.+24     	; 0x1f8 <main+0x152>
	{
	  if(fanbus_address == 0x00 || fanbus_address == 0x01 || fanbus_address == 0x02 || fanbus_address == 0xFF)
 1e0:	8f 2d       	mov	r24, r15
 1e2:	83 50       	subi	r24, 0x03	; 3
 1e4:	8c 3f       	cpi	r24, 0xFC	; 252
 1e6:	98 f0       	brcs	.+38     	; 0x20e <main+0x168>
	  {
	  	fanbus_address = old_fanbus_address;
 1e8:	e0 92 00 01 	sts	0x0100, r14
		eeprom_write_byte((unsigned char *)(14), fanbus_address);
 1ec:	8e e0       	ldi	r24, 0x0E	; 14
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	6e 2d       	mov	r22, r14
 1f2:	0e 94 41 03 	call	0x682	; 0x682 <__eewr_byte_m168>
 1f6:	fe 2c       	mov	r15, r14
	  	eeprom_write_byte((unsigned char *)(14), fanbus_address);
	  }
	}

	//Check for save
	if(save != 0)
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	88 23       	and	r24, r24
 1fc:	81 f4       	brne	.+32     	; 0x21e <main+0x178>
		save = 0;
	}

	//Check for restore

	if(restore != 0)
 1fe:	8a 81       	ldd	r24, Y+2	; 0x02
 200:	88 23       	and	r24, r24
 202:	19 f0       	breq	.+6      	; 0x20a <main+0x164>
	{
		restoreState();
 204:	0e 94 67 02 	call	0x4ce	; 0x4ce <restoreState>
		restore = 0;
 208:	1a 82       	std	Y+2, r1	; 0x02
  fanbus_register_buffer[0x18] = &compbuff[8];
  fanbus_register_buffer[0x19] = &compbuff[9];
  fanbus_register_buffer[0x1A] = &compbuff[10];
  fanbus_register_buffer[0x1B] = &compbuff[11];
    
  startUp();
 20a:	ef 2c       	mov	r14, r15
 20c:	dd cf       	rjmp	.-70     	; 0x1c8 <main+0x122>
		eeprom_write_byte((unsigned char *)(14), fanbus_address);
	  }
	  else
	  {
	    old_fanbus_address = fanbus_address;
	  	eeprom_write_byte((unsigned char *)(14), fanbus_address);
 20e:	8e e0       	ldi	r24, 0x0E	; 14
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	6f 2d       	mov	r22, r15
 214:	0e 94 41 03 	call	0x682	; 0x682 <__eewr_byte_m168>
	  }
	}

	//Check for save
	if(save != 0)
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	88 23       	and	r24, r24
 21c:	81 f3       	breq	.-32     	; 0x1fe <main+0x158>
	{
		saveState();
 21e:	0e 94 a1 02 	call	0x542	; 0x542 <saveState>
		save = 0;
 222:	19 82       	std	Y+1, r1	; 0x01
 224:	ec cf       	rjmp	.-40     	; 0x1fe <main+0x158>

00000226 <setupLEDs>:
unsigned char update = 0;

void setupLEDs() //Sets up timer0 for soft-PWM of LEDs
{
  //Set up timer0
  TIFR0 = (1 << TOV0);           // clear interrupt flag
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	85 bb       	out	0x15, r24	; 21
  TIMSK0 = (1 << TOIE0);         // enable overflow interrupt
 22a:	80 93 6e 00 	sts	0x006E, r24
  TCCR0B = (1<<CS00 | 0<<CS01 | 0<<CS02);// start timer, no prescale
 22e:	85 bd       	out	0x25, r24	; 37

  //Set up outputs
  PORTB = 0x00;
 230:	15 b8       	out	0x05, r1	; 5
  PORTC = 0x00;
 232:	18 b8       	out	0x08, r1	; 8
  DDRB = 0x3F; //00111111, 6 bits (0 through 5) as OUTPUT
 234:	8f e3       	ldi	r24, 0x3F	; 63
 236:	84 b9       	out	0x04, r24	; 4
  DDRC = 0x3F;
 238:	87 b9       	out	0x07, r24	; 7
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	90 e0       	ldi	r25, 0x00	; 0

  //Clear buffer and compare arrays
  for(char i = 0; i < 12; i++)
  {
    compare[i] = 0;
 23e:	fc 01       	movw	r30, r24
 240:	eb 5e       	subi	r30, 0xEB	; 235
 242:	fe 4f       	sbci	r31, 0xFE	; 254
 244:	10 82       	st	Z, r1
	compbuff[i] = 0;
 246:	fc 01       	movw	r30, r24
 248:	e7 5f       	subi	r30, 0xF7	; 247
 24a:	fe 4f       	sbci	r31, 0xFE	; 254
 24c:	10 82       	st	Z, r1
 24e:	01 96       	adiw	r24, 0x01	; 1
  PORTC = 0x00;
  DDRB = 0x3F; //00111111, 6 bits (0 through 5) as OUTPUT
  DDRC = 0x3F;

  //Clear buffer and compare arrays
  for(char i = 0; i < 12; i++)
 250:	8c 30       	cpi	r24, 0x0C	; 12
 252:	91 05       	cpc	r25, r1
 254:	a1 f7       	brne	.-24     	; 0x23e <setupLEDs+0x18>
    compare[i] = 0;
	compbuff[i] = 0;
  }

  //Enable interrupts
  sei();
 256:	78 94       	sei
}
 258:	08 95       	ret

0000025a <__vector_16>:

//This is the heart of the software PWM, whenever timer0 overflows this ISR
//performs all the software counting and checking to set the LED PWM for all
//12 channels
ISR(TIMER0_OVF_vect)
{
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
  PORTB = pinlevelB;            // update output mask B
 268:	80 91 03 01 	lds	r24, 0x0103
 26c:	85 b9       	out	0x05, r24	; 5
  PORTC = pinlevelC;            // update output mask C
 26e:	80 91 04 01 	lds	r24, 0x0104
 272:	88 b9       	out	0x08, r24	; 8

  if(++softcount == 128) 	//Increment software counter, if it overflows then update compare
 274:	90 91 02 01 	lds	r25, 0x0102
 278:	9f 5f       	subi	r25, 0xFF	; 255
 27a:	90 93 02 01 	sts	0x0102, r25
 27e:	90 38       	cpi	r25, 0x80	; 128
 280:	09 f4       	brne	.+2      	; 0x284 <__vector_16+0x2a>
 282:	84 c0       	rjmp	.+264    	; 0x38c <__vector_16+0x132>

  //Compare each element of the compare array with the current software count
  //If equal, run the appropriate clearing routine to shut off that LED in the
  //port mask, on next iteration of the interrupt the port mask will be applied
  //to the hardware outputs and the LEDs will show the updated state
  if(compare[0] == softcount)  LED1_RED_CLEAR;
 284:	80 91 15 01 	lds	r24, 0x0115
 288:	89 17       	cp	r24, r25
 28a:	09 f4       	brne	.+2      	; 0x28e <__vector_16+0x34>
 28c:	79 c0       	rjmp	.+242    	; 0x380 <__vector_16+0x126>
  if(compare[1] == softcount)  LED1_GRN_CLEAR;
 28e:	80 91 16 01 	lds	r24, 0x0116
 292:	98 17       	cp	r25, r24
 294:	09 f4       	brne	.+2      	; 0x298 <__vector_16+0x3e>
 296:	6e c0       	rjmp	.+220    	; 0x374 <__vector_16+0x11a>
  if(compare[2] == softcount)  LED1_BLU_CLEAR;
 298:	80 91 17 01 	lds	r24, 0x0117
 29c:	98 17       	cp	r25, r24
 29e:	09 f4       	brne	.+2      	; 0x2a2 <__vector_16+0x48>
 2a0:	63 c0       	rjmp	.+198    	; 0x368 <__vector_16+0x10e>

  if(compare[3] == softcount)  LED2_RED_CLEAR;
 2a2:	80 91 18 01 	lds	r24, 0x0118
 2a6:	98 17       	cp	r25, r24
 2a8:	09 f4       	brne	.+2      	; 0x2ac <__vector_16+0x52>
 2aa:	58 c0       	rjmp	.+176    	; 0x35c <__vector_16+0x102>
  if(compare[4] == softcount)  LED2_GRN_CLEAR;
 2ac:	80 91 19 01 	lds	r24, 0x0119
 2b0:	98 17       	cp	r25, r24
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <__vector_16+0x5c>
 2b4:	4d c0       	rjmp	.+154    	; 0x350 <__vector_16+0xf6>
  if(compare[5] == softcount)  LED2_BLU_CLEAR;
 2b6:	80 91 1a 01 	lds	r24, 0x011A
 2ba:	98 17       	cp	r25, r24
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <__vector_16+0x66>
 2be:	42 c0       	rjmp	.+132    	; 0x344 <__vector_16+0xea>

  if(compare[6] == softcount)  LED3_RED_CLEAR;
 2c0:	80 91 1b 01 	lds	r24, 0x011B
 2c4:	98 17       	cp	r25, r24
 2c6:	c1 f1       	breq	.+112    	; 0x338 <__vector_16+0xde>
  if(compare[7] == softcount)  LED3_GRN_CLEAR;
 2c8:	80 91 1c 01 	lds	r24, 0x011C
 2cc:	98 17       	cp	r25, r24
 2ce:	71 f1       	breq	.+92     	; 0x32c <__vector_16+0xd2>
  if(compare[8] == softcount)  LED3_BLU_CLEAR;
 2d0:	80 91 1d 01 	lds	r24, 0x011D
 2d4:	98 17       	cp	r25, r24
 2d6:	21 f1       	breq	.+72     	; 0x320 <__vector_16+0xc6>

  if(compare[9] == softcount)  LED4_RED_CLEAR;
 2d8:	80 91 1e 01 	lds	r24, 0x011E
 2dc:	98 17       	cp	r25, r24
 2de:	d1 f0       	breq	.+52     	; 0x314 <__vector_16+0xba>
  if(compare[10] == softcount) LED4_GRN_CLEAR;
 2e0:	80 91 1f 01 	lds	r24, 0x011F
 2e4:	98 17       	cp	r25, r24
 2e6:	81 f0       	breq	.+32     	; 0x308 <__vector_16+0xae>
  if(compare[11] == softcount) LED4_BLU_CLEAR;
 2e8:	80 91 20 01 	lds	r24, 0x0120
 2ec:	98 17       	cp	r25, r24
 2ee:	29 f4       	brne	.+10     	; 0x2fa <__vector_16+0xa0>
 2f0:	80 91 04 01 	lds	r24, 0x0104
 2f4:	8f 7d       	andi	r24, 0xDF	; 223
 2f6:	80 93 04 01 	sts	0x0104, r24
}
 2fa:	9f 91       	pop	r25
 2fc:	8f 91       	pop	r24
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti
  if(compare[6] == softcount)  LED3_RED_CLEAR;
  if(compare[7] == softcount)  LED3_GRN_CLEAR;
  if(compare[8] == softcount)  LED3_BLU_CLEAR;

  if(compare[9] == softcount)  LED4_RED_CLEAR;
  if(compare[10] == softcount) LED4_GRN_CLEAR;
 308:	80 91 04 01 	lds	r24, 0x0104
 30c:	8f 7e       	andi	r24, 0xEF	; 239
 30e:	80 93 04 01 	sts	0x0104, r24
 312:	ea cf       	rjmp	.-44     	; 0x2e8 <__vector_16+0x8e>

  if(compare[6] == softcount)  LED3_RED_CLEAR;
  if(compare[7] == softcount)  LED3_GRN_CLEAR;
  if(compare[8] == softcount)  LED3_BLU_CLEAR;

  if(compare[9] == softcount)  LED4_RED_CLEAR;
 314:	80 91 04 01 	lds	r24, 0x0104
 318:	87 7f       	andi	r24, 0xF7	; 247
 31a:	80 93 04 01 	sts	0x0104, r24
 31e:	e0 cf       	rjmp	.-64     	; 0x2e0 <__vector_16+0x86>
  if(compare[4] == softcount)  LED2_GRN_CLEAR;
  if(compare[5] == softcount)  LED2_BLU_CLEAR;

  if(compare[6] == softcount)  LED3_RED_CLEAR;
  if(compare[7] == softcount)  LED3_GRN_CLEAR;
  if(compare[8] == softcount)  LED3_BLU_CLEAR;
 320:	80 91 04 01 	lds	r24, 0x0104
 324:	8b 7f       	andi	r24, 0xFB	; 251
 326:	80 93 04 01 	sts	0x0104, r24
 32a:	d6 cf       	rjmp	.-84     	; 0x2d8 <__vector_16+0x7e>
  if(compare[3] == softcount)  LED2_RED_CLEAR;
  if(compare[4] == softcount)  LED2_GRN_CLEAR;
  if(compare[5] == softcount)  LED2_BLU_CLEAR;

  if(compare[6] == softcount)  LED3_RED_CLEAR;
  if(compare[7] == softcount)  LED3_GRN_CLEAR;
 32c:	80 91 04 01 	lds	r24, 0x0104
 330:	8d 7f       	andi	r24, 0xFD	; 253
 332:	80 93 04 01 	sts	0x0104, r24
 336:	cc cf       	rjmp	.-104    	; 0x2d0 <__vector_16+0x76>

  if(compare[3] == softcount)  LED2_RED_CLEAR;
  if(compare[4] == softcount)  LED2_GRN_CLEAR;
  if(compare[5] == softcount)  LED2_BLU_CLEAR;

  if(compare[6] == softcount)  LED3_RED_CLEAR;
 338:	80 91 04 01 	lds	r24, 0x0104
 33c:	8e 7f       	andi	r24, 0xFE	; 254
 33e:	80 93 04 01 	sts	0x0104, r24
 342:	c2 cf       	rjmp	.-124    	; 0x2c8 <__vector_16+0x6e>
  if(compare[1] == softcount)  LED1_GRN_CLEAR;
  if(compare[2] == softcount)  LED1_BLU_CLEAR;

  if(compare[3] == softcount)  LED2_RED_CLEAR;
  if(compare[4] == softcount)  LED2_GRN_CLEAR;
  if(compare[5] == softcount)  LED2_BLU_CLEAR;
 344:	80 91 03 01 	lds	r24, 0x0103
 348:	8f 7d       	andi	r24, 0xDF	; 223
 34a:	80 93 03 01 	sts	0x0103, r24
 34e:	b8 cf       	rjmp	.-144    	; 0x2c0 <__vector_16+0x66>
  if(compare[0] == softcount)  LED1_RED_CLEAR;
  if(compare[1] == softcount)  LED1_GRN_CLEAR;
  if(compare[2] == softcount)  LED1_BLU_CLEAR;

  if(compare[3] == softcount)  LED2_RED_CLEAR;
  if(compare[4] == softcount)  LED2_GRN_CLEAR;
 350:	80 91 03 01 	lds	r24, 0x0103
 354:	8f 7e       	andi	r24, 0xEF	; 239
 356:	80 93 03 01 	sts	0x0103, r24
 35a:	ad cf       	rjmp	.-166    	; 0x2b6 <__vector_16+0x5c>
  //to the hardware outputs and the LEDs will show the updated state
  if(compare[0] == softcount)  LED1_RED_CLEAR;
  if(compare[1] == softcount)  LED1_GRN_CLEAR;
  if(compare[2] == softcount)  LED1_BLU_CLEAR;

  if(compare[3] == softcount)  LED2_RED_CLEAR;
 35c:	80 91 03 01 	lds	r24, 0x0103
 360:	87 7f       	andi	r24, 0xF7	; 247
 362:	80 93 03 01 	sts	0x0103, r24
 366:	a2 cf       	rjmp	.-188    	; 0x2ac <__vector_16+0x52>
  //If equal, run the appropriate clearing routine to shut off that LED in the
  //port mask, on next iteration of the interrupt the port mask will be applied
  //to the hardware outputs and the LEDs will show the updated state
  if(compare[0] == softcount)  LED1_RED_CLEAR;
  if(compare[1] == softcount)  LED1_GRN_CLEAR;
  if(compare[2] == softcount)  LED1_BLU_CLEAR;
 368:	80 91 03 01 	lds	r24, 0x0103
 36c:	8b 7f       	andi	r24, 0xFB	; 251
 36e:	80 93 03 01 	sts	0x0103, r24
 372:	97 cf       	rjmp	.-210    	; 0x2a2 <__vector_16+0x48>
  //Compare each element of the compare array with the current software count
  //If equal, run the appropriate clearing routine to shut off that LED in the
  //port mask, on next iteration of the interrupt the port mask will be applied
  //to the hardware outputs and the LEDs will show the updated state
  if(compare[0] == softcount)  LED1_RED_CLEAR;
  if(compare[1] == softcount)  LED1_GRN_CLEAR;
 374:	80 91 03 01 	lds	r24, 0x0103
 378:	8d 7f       	andi	r24, 0xFD	; 253
 37a:	80 93 03 01 	sts	0x0103, r24
 37e:	8c cf       	rjmp	.-232    	; 0x298 <__vector_16+0x3e>

  //Compare each element of the compare array with the current software count
  //If equal, run the appropriate clearing routine to shut off that LED in the
  //port mask, on next iteration of the interrupt the port mask will be applied
  //to the hardware outputs and the LEDs will show the updated state
  if(compare[0] == softcount)  LED1_RED_CLEAR;
 380:	80 91 03 01 	lds	r24, 0x0103
 384:	8e 7f       	andi	r24, 0xFE	; 254
 386:	80 93 03 01 	sts	0x0103, r24
 38a:	81 cf       	rjmp	.-254    	; 0x28e <__vector_16+0x34>
  PORTB = pinlevelB;            // update output mask B
  PORTC = pinlevelC;            // update output mask C

  if(++softcount == 128) 	//Increment software counter, if it overflows then update compare
  { 						//array with buffer array and turn all the LED's on in output mask
  	if(update != 0)
 38c:	80 91 05 01 	lds	r24, 0x0105
 390:	88 23       	and	r24, r24
 392:	91 f1       	breq	.+100    	; 0x3f8 <__vector_16+0x19e>
	{
	    compare[0] = compbuff[0];
 394:	80 91 09 01 	lds	r24, 0x0109
 398:	80 93 15 01 	sts	0x0115, r24
	    compare[1] = compbuff[1];
 39c:	80 91 0a 01 	lds	r24, 0x010A
 3a0:	80 93 16 01 	sts	0x0116, r24
	    compare[2] = compbuff[2];
 3a4:	80 91 0b 01 	lds	r24, 0x010B
 3a8:	80 93 17 01 	sts	0x0117, r24
	    compare[3] = compbuff[3];
 3ac:	80 91 0c 01 	lds	r24, 0x010C
 3b0:	80 93 18 01 	sts	0x0118, r24
	    compare[4] = compbuff[4];
 3b4:	80 91 0d 01 	lds	r24, 0x010D
 3b8:	80 93 19 01 	sts	0x0119, r24
	    compare[5] = compbuff[5];
 3bc:	80 91 0e 01 	lds	r24, 0x010E
 3c0:	80 93 1a 01 	sts	0x011A, r24
	    compare[6] = compbuff[6];
 3c4:	80 91 0f 01 	lds	r24, 0x010F
 3c8:	80 93 1b 01 	sts	0x011B, r24
	    compare[7] = compbuff[7];
 3cc:	80 91 10 01 	lds	r24, 0x0110
 3d0:	80 93 1c 01 	sts	0x011C, r24
	    compare[8] = compbuff[8];
 3d4:	80 91 11 01 	lds	r24, 0x0111
 3d8:	80 93 1d 01 	sts	0x011D, r24
	    compare[9] = compbuff[9];
 3dc:	80 91 12 01 	lds	r24, 0x0112
 3e0:	80 93 1e 01 	sts	0x011E, r24
	    compare[10] = compbuff[10];
 3e4:	80 91 13 01 	lds	r24, 0x0113
 3e8:	80 93 1f 01 	sts	0x011F, r24
		compare[11] = compbuff[11];
 3ec:	80 91 14 01 	lds	r24, 0x0114
 3f0:	80 93 20 01 	sts	0x0120, r24
		
		update = 0;
 3f4:	10 92 05 01 	sts	0x0105, r1
	}
	softcount = 0;
 3f8:	10 92 02 01 	sts	0x0102, r1
    pinlevelB = 0x3F; //Set all LED's on mask B on
 3fc:	8f e3       	ldi	r24, 0x3F	; 63
 3fe:	80 93 03 01 	sts	0x0103, r24
    pinlevelC = 0x3F; //Set all LED's on mask C on
 402:	80 93 04 01 	sts	0x0104, r24
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	3d cf       	rjmp	.-390    	; 0x284 <__vector_16+0x2a>

0000040a <setupFan>:
//Fan is connected on pin 5 (OC2B) as output
//Connect fan using a transistor pair to switch 12V
void setupFan()
{
   //Fan on pin 5 (OC2B)
   DDRD   |= (1 << 3);
 40a:	53 9a       	sbi	0x0a, 3	; 10

   //Fan starts out off
   OCR2B = 0;
 40c:	10 92 b4 00 	sts	0x00B4, r1
     
   // Set up fan for PWM
   TCCR2A  = ((1 << COM2B1) | (1 << WGM20) | (1 << WGM21));
 410:	83 e2       	ldi	r24, 0x23	; 35
 412:	80 93 b0 00 	sts	0x00B0, r24
   TCCR2B  = ((1 << CS20) | (0 << CS21) | (0 << CS22) | (0 << WGM22));
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	80 93 b1 00 	sts	0x00B1, r24
   TIMSK2  = (0<<OCIE2B); //Enable Timer2 Overflow Interrupt
 41c:	10 92 70 00 	sts	0x0070, r1
   sei();
 420:	78 94       	sei
}
 422:	08 95       	ret

00000424 <getFanSpeed>:

char getFanSpeed()
{
	return OCR2B;
 424:	80 91 b4 00 	lds	r24, 0x00B4
}
 428:	08 95       	ret

0000042a <setFanSpeed>:

void setFanSpeed(char speed)
{
	OCR2B = speed;
 42a:	80 93 b4 00 	sts	0x00B4, r24
}
 42e:	08 95       	ret

00000430 <getFanSpeedPointer>:

unsigned char * getFanSpeedPointer()
{
   return &OCR2B;
}
 430:	84 eb       	ldi	r24, 0xB4	; 180
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	08 95       	ret

00000436 <getFanRPMPointer>:

unsigned int * getFanRPMPointer()
{
   return &FanRPM;
}
 436:	86 e0       	ldi	r24, 0x06	; 6
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	08 95       	ret

0000043c <setupFanRPMCount>:

void setupFanRPMCount()
{
  TCCR1A=0;                 // reset timer/counter1 control register A
 43c:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=0;              	// reset timer/counter1 control register A
 440:	e1 e8       	ldi	r30, 0x81	; 129
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	10 82       	st	Z, r1
  TCNT1=0;           		// counter value = 0
 446:	10 92 85 00 	sts	0x0085, r1
 44a:	10 92 84 00 	sts	0x0084, r1
  //Clock source on T1, falling edge (fan pulls down)
  TCCR1B = (1 << CS10) | (1 << CS11) | (1 << CS12);
 44e:	87 e0       	ldi	r24, 0x07	; 7
 450:	80 83       	st	Z, r24

  //Setup watchdog timer for 1hz refresh
  //WDTCSR = (1 << WDCE);
  //WDTCSR = (1 << WDP0) | (1 << WDP3);
  //WDTCSR = (1 << WDIE);
  WD_SET(WD_IRQ, WDTO_1S);
 452:	96 ec       	ldi	r25, 0xC6	; 198
 454:	88 e1       	ldi	r24, 0x18	; 24
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	f8 94       	cli
 45a:	a8 95       	wdr
 45c:	80 93 60 00 	sts	0x0060, r24
 460:	90 93 60 00 	sts	0x0060, r25
 464:	0f be       	out	0x3f, r0	; 63
}
 466:	08 95       	ret

00000468 <fanRPM>:

int fanRPM()
{
  return FanRPM;
}
 468:	80 91 06 01 	lds	r24, 0x0106
 46c:	90 91 07 01 	lds	r25, 0x0107
 470:	08 95       	ret

00000472 <__vector_6>:

ISR(WDT_vect)
{
 472:	1f 92       	push	r1
 474:	0f 92       	push	r0
 476:	0f b6       	in	r0, 0x3f	; 63
 478:	0f 92       	push	r0
 47a:	11 24       	eor	r1, r1
 47c:	2f 93       	push	r18
 47e:	3f 93       	push	r19
 480:	8f 93       	push	r24
 482:	9f 93       	push	r25
 484:	ef 93       	push	r30
 486:	ff 93       	push	r31
  FanRPM = TCNT1*30;
 488:	e4 e8       	ldi	r30, 0x84	; 132
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	20 81       	ld	r18, Z
 48e:	31 81       	ldd	r19, Z+1	; 0x01
 490:	c9 01       	movw	r24, r18
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	82 0f       	add	r24, r18
 498:	93 1f       	adc	r25, r19
 49a:	9c 01       	movw	r18, r24
 49c:	22 0f       	add	r18, r18
 49e:	33 1f       	adc	r19, r19
 4a0:	22 0f       	add	r18, r18
 4a2:	33 1f       	adc	r19, r19
 4a4:	82 0f       	add	r24, r18
 4a6:	93 1f       	adc	r25, r19
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	90 93 07 01 	sts	0x0107, r25
 4b0:	80 93 06 01 	sts	0x0106, r24
  TCNT1 = 0;
 4b4:	11 82       	std	Z+1, r1	; 0x01
 4b6:	10 82       	st	Z, r1
}
 4b8:	ff 91       	pop	r31
 4ba:	ef 91       	pop	r30
 4bc:	9f 91       	pop	r25
 4be:	8f 91       	pop	r24
 4c0:	3f 91       	pop	r19
 4c2:	2f 91       	pop	r18
 4c4:	0f 90       	pop	r0
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	0f 90       	pop	r0
 4ca:	1f 90       	pop	r1
 4cc:	18 95       	reti

000004ce <restoreState>:
  save_fanspeed = getFanSpeed(); 
  eeprom_write_byte((unsigned char*)13,save_fanspeed);
}

void restoreState()
{
 4ce:	20 e0       	ldi	r18, 0x00	; 0
 4d0:	30 e0       	ldi	r19, 0x00	; 0
  for(char i = 0; i < 12; i++)
  {
    compbuff[i] = save_compbuff[i];
 4d2:	f9 01       	movw	r30, r18
 4d4:	e7 5f       	subi	r30, 0xF7	; 247
 4d6:	fe 4f       	sbci	r31, 0xFE	; 254
 4d8:	d9 01       	movw	r26, r18
 4da:	ae 5d       	subi	r26, 0xDE	; 222
 4dc:	be 4f       	sbci	r27, 0xFE	; 254
 4de:	8c 91       	ld	r24, X
 4e0:	80 83       	st	Z, r24
 4e2:	2f 5f       	subi	r18, 0xFF	; 255
 4e4:	3f 4f       	sbci	r19, 0xFF	; 255
  eeprom_write_byte((unsigned char*)13,save_fanspeed);
}

void restoreState()
{
  for(char i = 0; i < 12; i++)
 4e6:	2c 30       	cpi	r18, 0x0C	; 12
 4e8:	31 05       	cpc	r19, r1
 4ea:	99 f7       	brne	.-26     	; 0x4d2 <restoreState+0x4>
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	80 93 05 01 	sts	0x0105, r24
  {
    compbuff[i] = save_compbuff[i];
	update = 1;
  }

  setFanSpeed(save_fanspeed);
 4f2:	80 91 21 01 	lds	r24, 0x0121
 4f6:	0e 94 15 02 	call	0x42a	; 0x42a <setFanSpeed>
}
 4fa:	08 95       	ret

000004fc <readEeprom>:

void readEeprom()
{
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	c1 e0       	ldi	r28, 0x01	; 1
 502:	d0 e0       	ldi	r29, 0x00	; 0
  for(char i = 0; i < 12; i++)
  {
    save_compbuff[i] = eeprom_read_byte((unsigned char*)(i+1));
 504:	ce 01       	movw	r24, r28
 506:	0e 94 39 03 	call	0x672	; 0x672 <__eerd_byte_m168>
 50a:	fe 01       	movw	r30, r28
 50c:	ef 5d       	subi	r30, 0xDF	; 223
 50e:	fe 4f       	sbci	r31, 0xFE	; 254
 510:	80 83       	st	Z, r24
 512:	21 96       	adiw	r28, 0x01	; 1
  setFanSpeed(save_fanspeed);
}

void readEeprom()
{
  for(char i = 0; i < 12; i++)
 514:	cd 30       	cpi	r28, 0x0D	; 13
 516:	d1 05       	cpc	r29, r1
 518:	a9 f7       	brne	.-22     	; 0x504 <__stack+0x5>
  {
    save_compbuff[i] = eeprom_read_byte((unsigned char*)(i+1));
  }

  save_fanspeed = eeprom_read_byte((unsigned char*)(13));
 51a:	8d e0       	ldi	r24, 0x0D	; 13
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 39 03 	call	0x672	; 0x672 <__eerd_byte_m168>
 522:	80 93 21 01 	sts	0x0121, r24
}
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	08 95       	ret

0000052c <startUp>:

void startUp()
{
  readEeprom();
 52c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <readEeprom>
  setFanSpeed(255);
 530:	8f ef       	ldi	r24, 0xFF	; 255
 532:	0e 94 15 02 	call	0x42a	; 0x42a <setFanSpeed>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 536:	81 e2       	ldi	r24, 0x21	; 33
 538:	8a 95       	dec	r24
 53a:	f1 f7       	brne	.-4      	; 0x538 <startUp+0xc>
  _delay_us(100);
  restoreState();
 53c:	0e 94 67 02 	call	0x4ce	; 0x4ce <restoreState>
}
 540:	08 95       	ret

00000542 <saveState>:

extern unsigned char compbuff[12];
extern char update;

void saveState()
{
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	c1 e0       	ldi	r28, 0x01	; 1
 548:	d0 e0       	ldi	r29, 0x00	; 0
  for(char i = 0; i < 12; i++)
  {
    save_compbuff[i] = compbuff[i];
 54a:	fe 01       	movw	r30, r28
 54c:	e8 5f       	subi	r30, 0xF8	; 248
 54e:	fe 4f       	sbci	r31, 0xFE	; 254
 550:	60 81       	ld	r22, Z
 552:	fe 01       	movw	r30, r28
 554:	ef 5d       	subi	r30, 0xDF	; 223
 556:	fe 4f       	sbci	r31, 0xFE	; 254
 558:	60 83       	st	Z, r22
	eeprom_write_byte((unsigned char*)(i+1),save_compbuff[i]);
 55a:	ce 01       	movw	r24, r28
 55c:	0e 94 41 03 	call	0x682	; 0x682 <__eewr_byte_m168>
 560:	21 96       	adiw	r28, 0x01	; 1
extern unsigned char compbuff[12];
extern char update;

void saveState()
{
  for(char i = 0; i < 12; i++)
 562:	cd 30       	cpi	r28, 0x0D	; 13
 564:	d1 05       	cpc	r29, r1
 566:	89 f7       	brne	.-30     	; 0x54a <saveState+0x8>
  {
    save_compbuff[i] = compbuff[i];
	eeprom_write_byte((unsigned char*)(i+1),save_compbuff[i]);
  }
  
  save_fanspeed = getFanSpeed(); 
 568:	0e 94 12 02 	call	0x424	; 0x424 <getFanSpeed>
 56c:	68 2f       	mov	r22, r24
 56e:	80 93 21 01 	sts	0x0121, r24
  eeprom_write_byte((unsigned char*)13,save_fanspeed);
 572:	8d e0       	ldi	r24, 0x0D	; 13
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	0e 94 41 03 	call	0x682	; 0x682 <__eewr_byte_m168>
}
 57a:	df 91       	pop	r29
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <__vector_18>:
unsigned char fanbus_dummy = 0;
unsigned char fanbus_address = 0xAA;

//USART Receive interrupt pushes the incoming byte into the buffer
ISR(USART_RX_vect)
{
 580:	1f 92       	push	r1
 582:	0f 92       	push	r0
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	0f 92       	push	r0
 588:	11 24       	eor	r1, r1
 58a:	2f 93       	push	r18
 58c:	8f 93       	push	r24
 58e:	9f 93       	push	r25
 590:	ef 93       	push	r30
 592:	ff 93       	push	r31
	//Shift in new data
	fanbus_serial_buffer[0] = fanbus_serial_buffer[1];
 594:	90 91 2f 01 	lds	r25, 0x012F
 598:	90 93 2e 01 	sts	0x012E, r25
	fanbus_serial_buffer[1] = fanbus_serial_buffer[2];
 59c:	80 91 30 01 	lds	r24, 0x0130
 5a0:	80 93 2f 01 	sts	0x012F, r24
	fanbus_serial_buffer[2] = fanbus_serial_buffer[3];
 5a4:	20 91 31 01 	lds	r18, 0x0131
 5a8:	20 93 30 01 	sts	0x0130, r18
	fanbus_serial_buffer[3] = fanbus_serial_buffer[4];
 5ac:	80 91 32 01 	lds	r24, 0x0132
 5b0:	80 93 31 01 	sts	0x0131, r24
	fanbus_serial_buffer[4] = UDR0;
 5b4:	80 91 c6 00 	lds	r24, 0x00C6
 5b8:	80 93 32 01 	sts	0x0132, r24

	//Test if valid write packet
	if(fanbus_serial_buffer[0] == 0x00 && fanbus_serial_buffer[4] == 0xFF)
 5bc:	99 23       	and	r25, r25
 5be:	61 f4       	brne	.+24     	; 0x5d8 <__vector_18+0x58>
 5c0:	8f 3f       	cpi	r24, 0xFF	; 255
 5c2:	31 f1       	breq	.+76     	; 0x610 <__vector_18+0x90>
		{
			//Perform Read Operation
			fanbus_transmit(*(fanbus_register_buffer[fanbus_serial_buffer[1]]));
		}
	}
}
 5c4:	ff 91       	pop	r31
 5c6:	ef 91       	pop	r30
 5c8:	9f 91       	pop	r25
 5ca:	8f 91       	pop	r24
 5cc:	2f 91       	pop	r18
 5ce:	0f 90       	pop	r0
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	0f 90       	pop	r0
 5d4:	1f 90       	pop	r1
 5d6:	18 95       	reti
		{
			//Perform operation
			*(fanbus_register_buffer[fanbus_serial_buffer[1]]) = fanbus_serial_buffer[3];
		}
	}
	else if(fanbus_serial_buffer[0] == 0x01 && fanbus_serial_buffer[4] == 0xFF)
 5d8:	91 30       	cpi	r25, 0x01	; 1
 5da:	a1 f7       	brne	.-24     	; 0x5c4 <__vector_18+0x44>
 5dc:	8f 3f       	cpi	r24, 0xFF	; 255
 5de:	91 f7       	brne	.-28     	; 0x5c4 <__vector_18+0x44>
	{
		//Check if it is our address
		if(fanbus_serial_buffer[2] == fanbus_address || fanbus_serial_buffer[2] == 0x02)
 5e0:	80 91 00 01 	lds	r24, 0x0100
 5e4:	28 17       	cp	r18, r24
 5e6:	11 f0       	breq	.+4      	; 0x5ec <__vector_18+0x6c>
 5e8:	22 30       	cpi	r18, 0x02	; 2
 5ea:	61 f7       	brne	.-40     	; 0x5c4 <__vector_18+0x44>
		{
			//Perform Read Operation
			fanbus_transmit(*(fanbus_register_buffer[fanbus_serial_buffer[1]]));
 5ec:	e0 91 2f 01 	lds	r30, 0x012F
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	ee 0f       	add	r30, r30
 5f4:	ff 1f       	adc	r31, r31
 5f6:	ed 5c       	subi	r30, 0xCD	; 205
 5f8:	fe 4f       	sbci	r31, 0xFE	; 254
 5fa:	01 90       	ld	r0, Z+
 5fc:	f0 81       	ld	r31, Z
 5fe:	e0 2d       	mov	r30, r0
 600:	e0 81       	ld	r30, Z
}

void fanbus_transmit(unsigned char data)
{
	//Wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));
 602:	80 91 c0 00 	lds	r24, 0x00C0
 606:	85 ff       	sbrs	r24, 5
 608:	fc cf       	rjmp	.-8      	; 0x602 <__vector_18+0x82>

	//Put data into buffer, send data
	UDR0 = data;
 60a:	e0 93 c6 00 	sts	0x00C6, r30
 60e:	da cf       	rjmp	.-76     	; 0x5c4 <__vector_18+0x44>

	//Test if valid write packet
	if(fanbus_serial_buffer[0] == 0x00 && fanbus_serial_buffer[4] == 0xFF)
	{
		//Check if it is our address or global address (0x02)
		if(fanbus_serial_buffer[2] == fanbus_address || fanbus_serial_buffer[2] == 0x02)
 610:	80 91 00 01 	lds	r24, 0x0100
 614:	28 17       	cp	r18, r24
 616:	11 f0       	breq	.+4      	; 0x61c <__vector_18+0x9c>
 618:	22 30       	cpi	r18, 0x02	; 2
 61a:	a1 f6       	brne	.-88     	; 0x5c4 <__vector_18+0x44>
		{
			//Perform operation
			*(fanbus_register_buffer[fanbus_serial_buffer[1]]) = fanbus_serial_buffer[3];
 61c:	e0 91 2f 01 	lds	r30, 0x012F
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	ee 0f       	add	r30, r30
 624:	ff 1f       	adc	r31, r31
 626:	ed 5c       	subi	r30, 0xCD	; 205
 628:	fe 4f       	sbci	r31, 0xFE	; 254
 62a:	01 90       	ld	r0, Z+
 62c:	f0 81       	ld	r31, Z
 62e:	e0 2d       	mov	r30, r0
 630:	80 91 31 01 	lds	r24, 0x0131
 634:	80 83       	st	Z, r24
 636:	c6 cf       	rjmp	.-116    	; 0x5c4 <__vector_18+0x44>

00000638 <fanbus_init>:
}

void fanbus_init(unsigned int baud)
{
	//Set baud rate
	UBRR0H = (unsigned char) (baud >> 8);
 638:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) (baud);
 63c:	80 93 c4 00 	sts	0x00C4, r24

	//Set frame format: 8 data, no parity, 2 stop bits
	UCSR0C = (0<<UMSEL00) | (0<<UPM00) | (0<<USBS0) | (3<<UCSZ00);
 640:	86 e0       	ldi	r24, 0x06	; 6
 642:	80 93 c2 00 	sts	0x00C2, r24

	//Enable receiver and transmitter
	UCSR0B = (1<<RXCIE0 | 1<<RXEN0) | (1<<TXEN0);
 646:	88 e9       	ldi	r24, 0x98	; 152
 648:	80 93 c1 00 	sts	0x00C1, r24
 64c:	e3 e3       	ldi	r30, 0x33	; 51
 64e:	f1 e0       	ldi	r31, 0x01	; 1
 650:	88 e0       	ldi	r24, 0x08	; 8
 652:	91 e0       	ldi	r25, 0x01	; 1

	//Initialize pointers to reserved safe address
	for(unsigned char i = 0; i < FANBUS_REGISTER_BUFFER_SIZE; i++)
	{
		fanbus_register_buffer[i] = &fanbus_dummy;
 654:	81 93       	st	Z+, r24
 656:	91 93       	st	Z+, r25

	//Enable receiver and transmitter
	UCSR0B = (1<<RXCIE0 | 1<<RXEN0) | (1<<TXEN0);

	//Initialize pointers to reserved safe address
	for(unsigned char i = 0; i < FANBUS_REGISTER_BUFFER_SIZE; i++)
 658:	21 e0       	ldi	r18, 0x01	; 1
 65a:	e3 37       	cpi	r30, 0x73	; 115
 65c:	f2 07       	cpc	r31, r18
 65e:	d1 f7       	brne	.-12     	; 0x654 <fanbus_init+0x1c>
	{
		fanbus_register_buffer[i] = &fanbus_dummy;
	}
}
 660:	08 95       	ret

00000662 <fanbus_transmit>:

void fanbus_transmit(unsigned char data)
{
 662:	98 2f       	mov	r25, r24
	//Wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));
 664:	80 91 c0 00 	lds	r24, 0x00C0
 668:	85 ff       	sbrs	r24, 5
 66a:	fc cf       	rjmp	.-8      	; 0x664 <fanbus_transmit+0x2>

	//Put data into buffer, send data
	UDR0 = data;
 66c:	90 93 c6 00 	sts	0x00C6, r25
}
 670:	08 95       	ret

00000672 <__eerd_byte_m168>:
 672:	f9 99       	sbic	0x1f, 1	; 31
 674:	fe cf       	rjmp	.-4      	; 0x672 <__eerd_byte_m168>
 676:	92 bd       	out	0x22, r25	; 34
 678:	81 bd       	out	0x21, r24	; 33
 67a:	f8 9a       	sbi	0x1f, 0	; 31
 67c:	99 27       	eor	r25, r25
 67e:	80 b5       	in	r24, 0x20	; 32
 680:	08 95       	ret

00000682 <__eewr_byte_m168>:
 682:	26 2f       	mov	r18, r22

00000684 <__eewr_r18_m168>:
 684:	f9 99       	sbic	0x1f, 1	; 31
 686:	fe cf       	rjmp	.-4      	; 0x684 <__eewr_r18_m168>
 688:	1f ba       	out	0x1f, r1	; 31
 68a:	92 bd       	out	0x22, r25	; 34
 68c:	81 bd       	out	0x21, r24	; 33
 68e:	20 bd       	out	0x20, r18	; 32
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	f8 94       	cli
 694:	fa 9a       	sbi	0x1f, 2	; 31
 696:	f9 9a       	sbi	0x1f, 1	; 31
 698:	0f be       	out	0x3f, r0	; 63
 69a:	01 96       	adiw	r24, 0x01	; 1
 69c:	08 95       	ret

0000069e <_exit>:
 69e:	f8 94       	cli

000006a0 <__stop_program>:
 6a0:	ff cf       	rjmp	.-2      	; 0x6a0 <__stop_program>
