
RGB_Fan_Controller_168.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000130  00800100  00001744  000017d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001744  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009d  00800230  00800230  00001908  2**0
                  ALLOC
  3 .debug_aranges 00000280  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004bf  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002fb5  00000000  00000000  00002047  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000019e1  00000000  00000000  00004ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001d04  00000000  00000000  000069dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003b0  00000000  00000000  000086e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f8  00000000  00000000  00008a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c77  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00009d03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 9c 02 	jmp	0x538	; 0x538 <__vector_6>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 ca 02 	jmp	0x594	; 0x594 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e4       	ldi	r30, 0x44	; 68
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a0 33       	cpi	r26, 0x30	; 48
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a0 e3       	ldi	r26, 0x30	; 48
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 3c       	cpi	r26, 0xCD	; 205
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "readFrame.h"
#include "save.h"

int main()
{
  serial_init(12); 		//38400 baud
      a6:	8c e0       	ldi	r24, 0x0C	; 12
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	0e 94 ef 02 	call	0x5de	; 0x5de <serial_init>
  setupLEDs();
      ae:	0e 94 62 00 	call	0xc4	; 0xc4 <setupLEDs>
  setupFan();
      b2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <setupFan>
  setupCount();
      b6:	0e 94 81 02 	call	0x502	; 0x502 <setupCount>
  startUp();
      ba:	0e 94 18 04 	call	0x830	; 0x830 <startUp>
  while(1)
  {
    readFrame();
      be:	0e 94 2d 03 	call	0x65a	; 0x65a <readFrame>
      c2:	fd cf       	rjmp	.-6      	; 0xbe <main+0x18>

000000c4 <setupLEDs>:
unsigned char update = 0;

void setupLEDs() //Sets up timer0 for soft-PWM of LEDs
{
  //Set up timer0
  TIFR0 = (1 << TOV0);           // clear interrupt flag
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	85 bb       	out	0x15, r24	; 21
  TIMSK0 = (1 << TOIE0);         // enable overflow interrupt
      c8:	80 93 6e 00 	sts	0x006E, r24
  TCCR0B = (1<<CS00 | 0<<CS01 | 0<<CS02);// start timer, no prescale
      cc:	85 bd       	out	0x25, r24	; 37

  //Set up outputs
  DDRB = 0x3F; //00111111, 6 bits (0 through 5) as OUTPUT
      ce:	8f e3       	ldi	r24, 0x3F	; 63
      d0:	84 b9       	out	0x04, r24	; 4
  DDRC = 0x3F;
      d2:	87 b9       	out	0x07, r24	; 7
      d4:	80 e0       	ldi	r24, 0x00	; 0
      d6:	90 e0       	ldi	r25, 0x00	; 0

  //Clear buffer and compare arrays
  for(char i = 0; i < 12; i++)
  {
    compare[i] = 0;
      d8:	fc 01       	movw	r30, r24
      da:	ef 5b       	subi	r30, 0xBF	; 191
      dc:	fd 4f       	sbci	r31, 0xFD	; 253
      de:	10 82       	st	Z, r1
	compbuff[i] = 0;
      e0:	fc 01       	movw	r30, r24
      e2:	eb 5c       	subi	r30, 0xCB	; 203
      e4:	fd 4f       	sbci	r31, 0xFD	; 253
      e6:	10 82       	st	Z, r1
      e8:	01 96       	adiw	r24, 0x01	; 1
  //Set up outputs
  DDRB = 0x3F; //00111111, 6 bits (0 through 5) as OUTPUT
  DDRC = 0x3F;

  //Clear buffer and compare arrays
  for(char i = 0; i < 12; i++)
      ea:	8c 30       	cpi	r24, 0x0C	; 12
      ec:	91 05       	cpc	r25, r1
      ee:	a1 f7       	brne	.-24     	; 0xd8 <setupLEDs+0x14>
    compare[i] = 0;
	compbuff[i] = 0;
  }

  //Enable interrupts
  sei();
      f0:	78 94       	sei
}
      f2:	08 95       	ret

000000f4 <__vector_16>:

//This is the heart of the software PWM, whenever timer0 overflows this ISR
//performs all the software counting and checking to set the LED PWM for all
//12 channels
ISR(TIMER0_OVF_vect)
{
      f4:	1f 92       	push	r1
      f6:	0f 92       	push	r0
      f8:	0f b6       	in	r0, 0x3f	; 63
      fa:	0f 92       	push	r0
      fc:	11 24       	eor	r1, r1
      fe:	8f 93       	push	r24
     100:	9f 93       	push	r25
  PORTB = pinlevelB;            // update output mask B
     102:	80 91 00 01 	lds	r24, 0x0100
     106:	85 b9       	out	0x05, r24	; 5
  PORTC = pinlevelC;            // update output mask C
     108:	80 91 01 01 	lds	r24, 0x0101
     10c:	88 b9       	out	0x08, r24	; 8

  if(++softcount == 128) 	//Increment software counter, if it overflows then update compare
     10e:	90 91 30 02 	lds	r25, 0x0230
     112:	9f 5f       	subi	r25, 0xFF	; 255
     114:	90 93 30 02 	sts	0x0230, r25
     118:	90 38       	cpi	r25, 0x80	; 128
     11a:	09 f4       	brne	.+2      	; 0x11e <__vector_16+0x2a>
     11c:	84 c0       	rjmp	.+264    	; 0x226 <__vector_16+0x132>

  //Compare each element of the compare array with the current software count
  //If equal, run the appropriate clearing routine to shut off that LED in the
  //port mask, on next iteration of the interrupt the port mask will be applied
  //to the hardware outputs and the LEDs will show the updated state
  if(compare[0] == softcount)  LED1_RED_CLEAR;
     11e:	80 91 41 02 	lds	r24, 0x0241
     122:	89 17       	cp	r24, r25
     124:	09 f4       	brne	.+2      	; 0x128 <__vector_16+0x34>
     126:	79 c0       	rjmp	.+242    	; 0x21a <__vector_16+0x126>
  if(compare[1] == softcount)  LED1_GRN_CLEAR;
     128:	80 91 42 02 	lds	r24, 0x0242
     12c:	98 17       	cp	r25, r24
     12e:	09 f4       	brne	.+2      	; 0x132 <__vector_16+0x3e>
     130:	6e c0       	rjmp	.+220    	; 0x20e <__vector_16+0x11a>
  if(compare[2] == softcount)  LED1_BLU_CLEAR;
     132:	80 91 43 02 	lds	r24, 0x0243
     136:	98 17       	cp	r25, r24
     138:	09 f4       	brne	.+2      	; 0x13c <__vector_16+0x48>
     13a:	63 c0       	rjmp	.+198    	; 0x202 <__vector_16+0x10e>

  if(compare[3] == softcount)  LED2_RED_CLEAR;
     13c:	80 91 44 02 	lds	r24, 0x0244
     140:	98 17       	cp	r25, r24
     142:	09 f4       	brne	.+2      	; 0x146 <__vector_16+0x52>
     144:	58 c0       	rjmp	.+176    	; 0x1f6 <__vector_16+0x102>
  if(compare[4] == softcount)  LED2_GRN_CLEAR;
     146:	80 91 45 02 	lds	r24, 0x0245
     14a:	98 17       	cp	r25, r24
     14c:	09 f4       	brne	.+2      	; 0x150 <__vector_16+0x5c>
     14e:	4d c0       	rjmp	.+154    	; 0x1ea <__vector_16+0xf6>
  if(compare[5] == softcount)  LED2_BLU_CLEAR;
     150:	80 91 46 02 	lds	r24, 0x0246
     154:	98 17       	cp	r25, r24
     156:	09 f4       	brne	.+2      	; 0x15a <__vector_16+0x66>
     158:	42 c0       	rjmp	.+132    	; 0x1de <__vector_16+0xea>

  if(compare[6] == softcount)  LED3_RED_CLEAR;
     15a:	80 91 47 02 	lds	r24, 0x0247
     15e:	98 17       	cp	r25, r24
     160:	c1 f1       	breq	.+112    	; 0x1d2 <__vector_16+0xde>
  if(compare[7] == softcount)  LED3_GRN_CLEAR;
     162:	80 91 48 02 	lds	r24, 0x0248
     166:	98 17       	cp	r25, r24
     168:	71 f1       	breq	.+92     	; 0x1c6 <__vector_16+0xd2>
  if(compare[8] == softcount)  LED3_BLU_CLEAR;
     16a:	80 91 49 02 	lds	r24, 0x0249
     16e:	98 17       	cp	r25, r24
     170:	21 f1       	breq	.+72     	; 0x1ba <__vector_16+0xc6>

  if(compare[9] == softcount)  LED4_RED_CLEAR;
     172:	80 91 4a 02 	lds	r24, 0x024A
     176:	98 17       	cp	r25, r24
     178:	d1 f0       	breq	.+52     	; 0x1ae <__vector_16+0xba>
  if(compare[10] == softcount) LED4_GRN_CLEAR;
     17a:	80 91 4b 02 	lds	r24, 0x024B
     17e:	98 17       	cp	r25, r24
     180:	81 f0       	breq	.+32     	; 0x1a2 <__vector_16+0xae>
  if(compare[11] == softcount) LED4_BLU_CLEAR;
     182:	80 91 4c 02 	lds	r24, 0x024C
     186:	98 17       	cp	r25, r24
     188:	29 f4       	brne	.+10     	; 0x194 <__vector_16+0xa0>
     18a:	80 91 01 01 	lds	r24, 0x0101
     18e:	8f 7d       	andi	r24, 0xDF	; 223
     190:	80 93 01 01 	sts	0x0101, r24
}
     194:	9f 91       	pop	r25
     196:	8f 91       	pop	r24
     198:	0f 90       	pop	r0
     19a:	0f be       	out	0x3f, r0	; 63
     19c:	0f 90       	pop	r0
     19e:	1f 90       	pop	r1
     1a0:	18 95       	reti
  if(compare[6] == softcount)  LED3_RED_CLEAR;
  if(compare[7] == softcount)  LED3_GRN_CLEAR;
  if(compare[8] == softcount)  LED3_BLU_CLEAR;

  if(compare[9] == softcount)  LED4_RED_CLEAR;
  if(compare[10] == softcount) LED4_GRN_CLEAR;
     1a2:	80 91 01 01 	lds	r24, 0x0101
     1a6:	8f 7e       	andi	r24, 0xEF	; 239
     1a8:	80 93 01 01 	sts	0x0101, r24
     1ac:	ea cf       	rjmp	.-44     	; 0x182 <__vector_16+0x8e>

  if(compare[6] == softcount)  LED3_RED_CLEAR;
  if(compare[7] == softcount)  LED3_GRN_CLEAR;
  if(compare[8] == softcount)  LED3_BLU_CLEAR;

  if(compare[9] == softcount)  LED4_RED_CLEAR;
     1ae:	80 91 01 01 	lds	r24, 0x0101
     1b2:	87 7f       	andi	r24, 0xF7	; 247
     1b4:	80 93 01 01 	sts	0x0101, r24
     1b8:	e0 cf       	rjmp	.-64     	; 0x17a <__vector_16+0x86>
  if(compare[4] == softcount)  LED2_GRN_CLEAR;
  if(compare[5] == softcount)  LED2_BLU_CLEAR;

  if(compare[6] == softcount)  LED3_RED_CLEAR;
  if(compare[7] == softcount)  LED3_GRN_CLEAR;
  if(compare[8] == softcount)  LED3_BLU_CLEAR;
     1ba:	80 91 01 01 	lds	r24, 0x0101
     1be:	8b 7f       	andi	r24, 0xFB	; 251
     1c0:	80 93 01 01 	sts	0x0101, r24
     1c4:	d6 cf       	rjmp	.-84     	; 0x172 <__vector_16+0x7e>
  if(compare[3] == softcount)  LED2_RED_CLEAR;
  if(compare[4] == softcount)  LED2_GRN_CLEAR;
  if(compare[5] == softcount)  LED2_BLU_CLEAR;

  if(compare[6] == softcount)  LED3_RED_CLEAR;
  if(compare[7] == softcount)  LED3_GRN_CLEAR;
     1c6:	80 91 01 01 	lds	r24, 0x0101
     1ca:	8d 7f       	andi	r24, 0xFD	; 253
     1cc:	80 93 01 01 	sts	0x0101, r24
     1d0:	cc cf       	rjmp	.-104    	; 0x16a <__vector_16+0x76>

  if(compare[3] == softcount)  LED2_RED_CLEAR;
  if(compare[4] == softcount)  LED2_GRN_CLEAR;
  if(compare[5] == softcount)  LED2_BLU_CLEAR;

  if(compare[6] == softcount)  LED3_RED_CLEAR;
     1d2:	80 91 01 01 	lds	r24, 0x0101
     1d6:	8e 7f       	andi	r24, 0xFE	; 254
     1d8:	80 93 01 01 	sts	0x0101, r24
     1dc:	c2 cf       	rjmp	.-124    	; 0x162 <__vector_16+0x6e>
  if(compare[1] == softcount)  LED1_GRN_CLEAR;
  if(compare[2] == softcount)  LED1_BLU_CLEAR;

  if(compare[3] == softcount)  LED2_RED_CLEAR;
  if(compare[4] == softcount)  LED2_GRN_CLEAR;
  if(compare[5] == softcount)  LED2_BLU_CLEAR;
     1de:	80 91 00 01 	lds	r24, 0x0100
     1e2:	8f 7d       	andi	r24, 0xDF	; 223
     1e4:	80 93 00 01 	sts	0x0100, r24
     1e8:	b8 cf       	rjmp	.-144    	; 0x15a <__vector_16+0x66>
  if(compare[0] == softcount)  LED1_RED_CLEAR;
  if(compare[1] == softcount)  LED1_GRN_CLEAR;
  if(compare[2] == softcount)  LED1_BLU_CLEAR;

  if(compare[3] == softcount)  LED2_RED_CLEAR;
  if(compare[4] == softcount)  LED2_GRN_CLEAR;
     1ea:	80 91 00 01 	lds	r24, 0x0100
     1ee:	8f 7e       	andi	r24, 0xEF	; 239
     1f0:	80 93 00 01 	sts	0x0100, r24
     1f4:	ad cf       	rjmp	.-166    	; 0x150 <__vector_16+0x5c>
  //to the hardware outputs and the LEDs will show the updated state
  if(compare[0] == softcount)  LED1_RED_CLEAR;
  if(compare[1] == softcount)  LED1_GRN_CLEAR;
  if(compare[2] == softcount)  LED1_BLU_CLEAR;

  if(compare[3] == softcount)  LED2_RED_CLEAR;
     1f6:	80 91 00 01 	lds	r24, 0x0100
     1fa:	87 7f       	andi	r24, 0xF7	; 247
     1fc:	80 93 00 01 	sts	0x0100, r24
     200:	a2 cf       	rjmp	.-188    	; 0x146 <__vector_16+0x52>
  //If equal, run the appropriate clearing routine to shut off that LED in the
  //port mask, on next iteration of the interrupt the port mask will be applied
  //to the hardware outputs and the LEDs will show the updated state
  if(compare[0] == softcount)  LED1_RED_CLEAR;
  if(compare[1] == softcount)  LED1_GRN_CLEAR;
  if(compare[2] == softcount)  LED1_BLU_CLEAR;
     202:	80 91 00 01 	lds	r24, 0x0100
     206:	8b 7f       	andi	r24, 0xFB	; 251
     208:	80 93 00 01 	sts	0x0100, r24
     20c:	97 cf       	rjmp	.-210    	; 0x13c <__vector_16+0x48>
  //Compare each element of the compare array with the current software count
  //If equal, run the appropriate clearing routine to shut off that LED in the
  //port mask, on next iteration of the interrupt the port mask will be applied
  //to the hardware outputs and the LEDs will show the updated state
  if(compare[0] == softcount)  LED1_RED_CLEAR;
  if(compare[1] == softcount)  LED1_GRN_CLEAR;
     20e:	80 91 00 01 	lds	r24, 0x0100
     212:	8d 7f       	andi	r24, 0xFD	; 253
     214:	80 93 00 01 	sts	0x0100, r24
     218:	8c cf       	rjmp	.-232    	; 0x132 <__vector_16+0x3e>

  //Compare each element of the compare array with the current software count
  //If equal, run the appropriate clearing routine to shut off that LED in the
  //port mask, on next iteration of the interrupt the port mask will be applied
  //to the hardware outputs and the LEDs will show the updated state
  if(compare[0] == softcount)  LED1_RED_CLEAR;
     21a:	80 91 00 01 	lds	r24, 0x0100
     21e:	8e 7f       	andi	r24, 0xFE	; 254
     220:	80 93 00 01 	sts	0x0100, r24
     224:	81 cf       	rjmp	.-254    	; 0x128 <__vector_16+0x34>
  PORTB = pinlevelB;            // update output mask B
  PORTC = pinlevelC;            // update output mask C

  if(++softcount == 128) 	//Increment software counter, if it overflows then update compare
  { 						//array with buffer array and turn all the LED's on in output mask
  	if(update == 1)
     226:	80 91 31 02 	lds	r24, 0x0231
     22a:	81 30       	cpi	r24, 0x01	; 1
     22c:	49 f0       	breq	.+18     	; 0x240 <__vector_16+0x14c>
	    compare[10] = compbuff[10];
		compare[11] = compbuff[11];
		
		update = 0;
	}
	softcount = 0;
     22e:	10 92 30 02 	sts	0x0230, r1
    pinlevelB = 0x3F; //Set all LED's on mask B on
     232:	8f e3       	ldi	r24, 0x3F	; 63
     234:	80 93 00 01 	sts	0x0100, r24
    pinlevelC = 0x3F; //Set all LED's on mask C on
     238:	80 93 01 01 	sts	0x0101, r24
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	6f cf       	rjmp	.-290    	; 0x11e <__vector_16+0x2a>

  if(++softcount == 128) 	//Increment software counter, if it overflows then update compare
  { 						//array with buffer array and turn all the LED's on in output mask
  	if(update == 1)
	{
	    compare[0] = compbuff[0];
     240:	80 91 35 02 	lds	r24, 0x0235
     244:	80 93 41 02 	sts	0x0241, r24
	    compare[1] = compbuff[1];
     248:	80 91 36 02 	lds	r24, 0x0236
     24c:	80 93 42 02 	sts	0x0242, r24
	    compare[2] = compbuff[2];
     250:	80 91 37 02 	lds	r24, 0x0237
     254:	80 93 43 02 	sts	0x0243, r24
	    compare[3] = compbuff[3];
     258:	80 91 38 02 	lds	r24, 0x0238
     25c:	80 93 44 02 	sts	0x0244, r24
	    compare[4] = compbuff[4];
     260:	80 91 39 02 	lds	r24, 0x0239
     264:	80 93 45 02 	sts	0x0245, r24
	    compare[5] = compbuff[5];
     268:	80 91 3a 02 	lds	r24, 0x023A
     26c:	80 93 46 02 	sts	0x0246, r24
	    compare[6] = compbuff[6];
     270:	80 91 3b 02 	lds	r24, 0x023B
     274:	80 93 47 02 	sts	0x0247, r24
	    compare[7] = compbuff[7];
     278:	80 91 3c 02 	lds	r24, 0x023C
     27c:	80 93 48 02 	sts	0x0248, r24
	    compare[8] = compbuff[8];
     280:	80 91 3d 02 	lds	r24, 0x023D
     284:	80 93 49 02 	sts	0x0249, r24
	    compare[9] = compbuff[9];
     288:	80 91 3e 02 	lds	r24, 0x023E
     28c:	80 93 4a 02 	sts	0x024A, r24
	    compare[10] = compbuff[10];
     290:	80 91 3f 02 	lds	r24, 0x023F
     294:	80 93 4b 02 	sts	0x024B, r24
		compare[11] = compbuff[11];
     298:	80 91 40 02 	lds	r24, 0x0240
     29c:	80 93 4c 02 	sts	0x024C, r24
		
		update = 0;
     2a0:	10 92 31 02 	sts	0x0231, r1
     2a4:	c4 cf       	rjmp	.-120    	; 0x22e <__vector_16+0x13a>

000002a6 <calculateVal>:
	update = 1;
  }
}

char calculateVal(int step, char val, int i)
{
     2a6:	9c 01       	movw	r18, r24
     2a8:	e6 2f       	mov	r30, r22
  if ((step) && i % step == 0) { // If step is non-zero and its time to change a value,
     2aa:	00 97       	sbiw	r24, 0x00	; 0
     2ac:	51 f0       	breq	.+20     	; 0x2c2 <calculateVal+0x1c>
     2ae:	ca 01       	movw	r24, r20
     2b0:	b9 01       	movw	r22, r18
     2b2:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__divmodhi4>
     2b6:	89 2b       	or	r24, r25
     2b8:	21 f4       	brne	.+8      	; 0x2c2 <calculateVal+0x1c>
    if (step > 0) {              //   increment the value if step is positive...
     2ba:	12 16       	cp	r1, r18
     2bc:	13 06       	cpc	r1, r19
     2be:	1c f4       	brge	.+6      	; 0x2c6 <calculateVal+0x20>
      val += 1;           
     2c0:	ef 5f       	subi	r30, 0xFF	; 255
  } 
  else if (val < 0) {
    val = 0;
  }
  return val;
}
     2c2:	8e 2f       	mov	r24, r30
     2c4:	08 95       	ret
  if ((step) && i % step == 0) { // If step is non-zero and its time to change a value,
    if (step > 0) {              //   increment the value if step is positive...
      val += 1;           
    } 
    else if (step < 0) {         //   ...or decrement it if step is negative
      val -= 1;
     2c6:	e1 50       	subi	r30, 0x01	; 1
     2c8:	fc cf       	rjmp	.-8      	; 0x2c2 <calculateVal+0x1c>

000002ca <calculateStep>:
  return val;
}

int calculateStep(char prevValue, char endValue)
{
  int step = endValue - prevValue; // What's the overall gap?
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	68 1b       	sub	r22, r24
     2ce:	71 09       	sbc	r23, r1
  if (step) {                      // If its non-zero, 
     2d0:	61 15       	cp	r22, r1
     2d2:	71 05       	cpc	r23, r1
     2d4:	21 f0       	breq	.+8      	; 0x2de <calculateStep+0x14>
    step = 1020/step;              //   divide by 1020
     2d6:	8c ef       	ldi	r24, 0xFC	; 252
     2d8:	93 e0       	ldi	r25, 0x03	; 3
     2da:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__divmodhi4>
  } 
  return step;
}
     2de:	cb 01       	movw	r24, r22
     2e0:	08 95       	ret

000002e2 <crossFade>:
char colorVal[12];
int colorStep[12];
char crossfade[12];

void crossFade(char wait)
{
     2e2:	2f 92       	push	r2
     2e4:	3f 92       	push	r3
     2e6:	4f 92       	push	r4
     2e8:	5f 92       	push	r5
     2ea:	6f 92       	push	r6
     2ec:	7f 92       	push	r7
     2ee:	8f 92       	push	r8
     2f0:	9f 92       	push	r9
     2f2:	af 92       	push	r10
     2f4:	bf 92       	push	r11
     2f6:	cf 92       	push	r12
     2f8:	df 92       	push	r13
     2fa:	ef 92       	push	r14
     2fc:	ff 92       	push	r15
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	df 93       	push	r29
     304:	cf 93       	push	r28
     306:	00 d0       	rcall	.+0      	; 0x308 <crossFade+0x26>
     308:	00 d0       	rcall	.+0      	; 0x30a <crossFade+0x28>
     30a:	00 d0       	rcall	.+0      	; 0x30c <crossFade+0x2a>
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
     310:	f8 2e       	mov	r15, r24
     312:	09 e5       	ldi	r16, 0x59	; 89
     314:	12 e0       	ldi	r17, 0x02	; 2
     316:	cc 24       	eor	r12, r12
     318:	dd 24       	eor	r13, r13
  for (unsigned char i = 0; i < 12; i++)
  {
    colorStep[i] = calculateStep(compbuff[i], crossfade[i]);
     31a:	f6 01       	movw	r30, r12
     31c:	eb 5c       	subi	r30, 0xCB	; 203
     31e:	fd 4f       	sbci	r31, 0xFD	; 253
     320:	d6 01       	movw	r26, r12
     322:	af 58       	subi	r26, 0x8F	; 143
     324:	bd 4f       	sbci	r27, 0xFD	; 253
     326:	80 81       	ld	r24, Z
     328:	6c 91       	ld	r22, X
     32a:	0e 94 65 01 	call	0x2ca	; 0x2ca <calculateStep>
     32e:	f8 01       	movw	r30, r16
     330:	81 93       	st	Z+, r24
     332:	91 93       	st	Z+, r25
     334:	8f 01       	movw	r16, r30
     336:	08 94       	sec
     338:	c1 1c       	adc	r12, r1
     33a:	d1 1c       	adc	r13, r1
int colorStep[12];
char crossfade[12];

void crossFade(char wait)
{
  for (unsigned char i = 0; i < 12; i++)
     33c:	fc e0       	ldi	r31, 0x0C	; 12
     33e:	cf 16       	cp	r12, r31
     340:	d1 04       	cpc	r13, r1
     342:	59 f7       	brne	.-42     	; 0x31a <crossFade+0x38>
     344:	6f 2d       	mov	r22, r15
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 be 08 	call	0x117c	; 0x117c <__floatunsisf>
     350:	69 83       	std	Y+1, r22	; 0x01
     352:	7a 83       	std	Y+2, r23	; 0x02
     354:	8b 83       	std	Y+3, r24	; 0x03
     356:	9c 83       	std	Y+4, r25	; 0x04
     358:	2b ea       	ldi	r18, 0xAB	; 171
     35a:	3a ea       	ldi	r19, 0xAA	; 170
     35c:	4a e2       	ldi	r20, 0x2A	; 42
     35e:	50 e4       	ldi	r21, 0x40	; 64
     360:	0e 94 34 06 	call	0xc68	; 0xc68 <__mulsf3>
     364:	2b 01       	movw	r4, r22
     366:	3c 01       	movw	r6, r24
     368:	22 24       	eor	r2, r2
     36a:	33 24       	eor	r3, r3
  {
    colorStep[i] = calculateStep(compbuff[i], crossfade[i]);
  }

  for (int i = 0; i < 1020; i++)
     36c:	85 e3       	ldi	r24, 0x35	; 53
     36e:	c8 2e       	mov	r12, r24
     370:	82 e0       	ldi	r24, 0x02	; 2
     372:	d8 2e       	mov	r13, r24
     374:	89 e5       	ldi	r24, 0x59	; 89
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	9e 83       	std	Y+6, r25	; 0x06
     37a:	8d 83       	std	Y+5, r24	; 0x05
  {  
	for(int j = 0; j < 12; j++)
	{
	  compbuff[j] = calculateVal(colorStep[j], compbuff[j], i);
     37c:	ed 81       	ldd	r30, Y+5	; 0x05
     37e:	fe 81       	ldd	r31, Y+6	; 0x06
     380:	80 81       	ld	r24, Z
     382:	91 81       	ldd	r25, Z+1	; 0x01
     384:	f6 01       	movw	r30, r12
     386:	60 81       	ld	r22, Z
     388:	a1 01       	movw	r20, r2
     38a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <calculateVal>
     38e:	f6 01       	movw	r30, r12
     390:	80 83       	st	Z, r24
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
	if (__tmp < 1.0)
     392:	c3 01       	movw	r24, r6
     394:	b2 01       	movw	r22, r4
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	40 e8       	ldi	r20, 0x80	; 128
     39c:	5f e3       	ldi	r21, 0x3F	; 63
     39e:	0e 94 3a 08 	call	0x1074	; 0x1074 <__ltsf2>
     3a2:	88 23       	and	r24, r24
     3a4:	0c f4       	brge	.+2      	; 0x3a8 <crossFade+0xc6>
     3a6:	8d c0       	rjmp	.+282    	; 0x4c2 <crossFade+0x1e0>
		__ticks = 1;
	else if (__tmp > 255)
     3a8:	c3 01       	movw	r24, r6
     3aa:	b2 01       	movw	r22, r4
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	4f e7       	ldi	r20, 0x7F	; 127
     3b2:	53 e4       	ldi	r21, 0x43	; 67
     3b4:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__gtsf2>
     3b8:	18 16       	cp	r1, r24
     3ba:	0c f0       	brlt	.+2      	; 0x3be <crossFade+0xdc>
     3bc:	7b c0       	rjmp	.+246    	; 0x4b4 <crossFade+0x1d2>
	{
		_delay_ms(__us / 1000.0);
     3be:	69 81       	ldd	r22, Y+1	; 0x01
     3c0:	7a 81       	ldd	r23, Y+2	; 0x02
     3c2:	8b 81       	ldd	r24, Y+3	; 0x03
     3c4:	9c 81       	ldd	r25, Y+4	; 0x04
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	4a e7       	ldi	r20, 0x7A	; 122
     3cc:	54 e4       	ldi	r21, 0x44	; 68
     3ce:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__divsf3>
     3d2:	4b 01       	movw	r8, r22
     3d4:	5c 01       	movw	r10, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	4a ef       	ldi	r20, 0xFA	; 250
     3dc:	54 e4       	ldi	r21, 0x44	; 68
     3de:	0e 94 34 06 	call	0xc68	; 0xc68 <__mulsf3>
     3e2:	7b 01       	movw	r14, r22
     3e4:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     3e6:	20 e0       	ldi	r18, 0x00	; 0
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	40 e8       	ldi	r20, 0x80	; 128
     3ec:	5f e3       	ldi	r21, 0x3F	; 63
     3ee:	0e 94 3a 08 	call	0x1074	; 0x1074 <__ltsf2>
     3f2:	88 23       	and	r24, r24
     3f4:	0c f4       	brge	.+2      	; 0x3f8 <crossFade+0x116>
     3f6:	6f c0       	rjmp	.+222    	; 0x4d6 <crossFade+0x1f4>
		__ticks = 1;
	else if (__tmp > 65535)
     3f8:	c8 01       	movw	r24, r16
     3fa:	b7 01       	movw	r22, r14
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	3f ef       	ldi	r19, 0xFF	; 255
     400:	4f e7       	ldi	r20, 0x7F	; 127
     402:	57 e4       	ldi	r21, 0x47	; 71
     404:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__gtsf2>
     408:	18 16       	cp	r1, r24
     40a:	0c f0       	brlt	.+2      	; 0x40e <crossFade+0x12c>
     40c:	5c c0       	rjmp	.+184    	; 0x4c6 <crossFade+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     40e:	c5 01       	movw	r24, r10
     410:	b4 01       	movw	r22, r8
     412:	20 e0       	ldi	r18, 0x00	; 0
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	40 e2       	ldi	r20, 0x20	; 32
     418:	51 e4       	ldi	r21, 0x41	; 65
     41a:	0e 94 34 06 	call	0xc68	; 0xc68 <__mulsf3>
     41e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__fixunssfsi>
     422:	cb 01       	movw	r24, r22
		while(__ticks)
     424:	67 2b       	or	r22, r23
     426:	31 f0       	breq	.+12     	; 0x434 <crossFade+0x152>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     428:	e8 ec       	ldi	r30, 0xC8	; 200
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	31 97       	sbiw	r30, 0x01	; 1
     42e:	f1 f7       	brne	.-4      	; 0x42c <crossFade+0x14a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     430:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     432:	d1 f7       	brne	.-12     	; 0x428 <crossFade+0x146>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     434:	8d 81       	ldd	r24, Y+5	; 0x05
     436:	9e 81       	ldd	r25, Y+6	; 0x06
     438:	02 96       	adiw	r24, 0x02	; 2
     43a:	9e 83       	std	Y+6, r25	; 0x06
     43c:	8d 83       	std	Y+5, r24	; 0x05
     43e:	08 94       	sec
     440:	c1 1c       	adc	r12, r1
     442:	d1 1c       	adc	r13, r1
    colorStep[i] = calculateStep(compbuff[i], crossfade[i]);
  }

  for (int i = 0; i < 1020; i++)
  {  
	for(int j = 0; j < 12; j++)
     444:	81 57       	subi	r24, 0x71	; 113
     446:	92 40       	sbci	r25, 0x02	; 2
     448:	09 f0       	breq	.+2      	; 0x44c <crossFade+0x16a>
     44a:	98 cf       	rjmp	.-208    	; 0x37c <crossFade+0x9a>
  for (unsigned char i = 0; i < 12; i++)
  {
    colorStep[i] = calculateStep(compbuff[i], crossfade[i]);
  }

  for (int i = 0; i < 1020; i++)
     44c:	08 94       	sec
     44e:	21 1c       	adc	r2, r1
     450:	31 1c       	adc	r3, r1
     452:	fc ef       	ldi	r31, 0xFC	; 252
     454:	2f 16       	cp	r2, r31
     456:	f3 e0       	ldi	r31, 0x03	; 3
     458:	3f 06       	cpc	r3, r31
     45a:	09 f0       	breq	.+2      	; 0x45e <crossFade+0x17c>
     45c:	87 cf       	rjmp	.-242    	; 0x36c <crossFade+0x8a>
     45e:	20 e0       	ldi	r18, 0x00	; 0
     460:	30 e0       	ldi	r19, 0x00	; 0
    }
  }

  for (unsigned char i = 0; i < 12; i++)
  {
    compbuff[i] = crossfade[i];
     462:	f9 01       	movw	r30, r18
     464:	eb 5c       	subi	r30, 0xCB	; 203
     466:	fd 4f       	sbci	r31, 0xFD	; 253
     468:	d9 01       	movw	r26, r18
     46a:	af 58       	subi	r26, 0x8F	; 143
     46c:	bd 4f       	sbci	r27, 0xFD	; 253
     46e:	8c 91       	ld	r24, X
     470:	80 83       	st	Z, r24
     472:	2f 5f       	subi	r18, 0xFF	; 255
     474:	3f 4f       	sbci	r19, 0xFF	; 255
	  update = 1;
      _delay_us(wait); // Pause for 'wait' milliseconds before resuming the loop
    }
  }

  for (unsigned char i = 0; i < 12; i++)
     476:	2c 30       	cpi	r18, 0x0C	; 12
     478:	31 05       	cpc	r19, r1
     47a:	99 f7       	brne	.-26     	; 0x462 <crossFade+0x180>
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 93 31 02 	sts	0x0231, r24
  {
    compbuff[i] = crossfade[i];
	update = 1;
  }
}
     482:	26 96       	adiw	r28, 0x06	; 6
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	cf 91       	pop	r28
     490:	df 91       	pop	r29
     492:	1f 91       	pop	r17
     494:	0f 91       	pop	r16
     496:	ff 90       	pop	r15
     498:	ef 90       	pop	r14
     49a:	df 90       	pop	r13
     49c:	cf 90       	pop	r12
     49e:	bf 90       	pop	r11
     4a0:	af 90       	pop	r10
     4a2:	9f 90       	pop	r9
     4a4:	8f 90       	pop	r8
     4a6:	7f 90       	pop	r7
     4a8:	6f 90       	pop	r6
     4aa:	5f 90       	pop	r5
     4ac:	4f 90       	pop	r4
     4ae:	3f 90       	pop	r3
     4b0:	2f 90       	pop	r2
     4b2:	08 95       	ret
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     4b4:	c3 01       	movw	r24, r6
     4b6:	b2 01       	movw	r22, r4
     4b8:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__fixunssfsi>
     4bc:	6a 95       	dec	r22
     4be:	f1 f7       	brne	.-4      	; 0x4bc <crossFade+0x1da>
     4c0:	b9 cf       	rjmp	.-142    	; 0x434 <crossFade+0x152>
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
	if (__tmp < 1.0)
     4c2:	61 e0       	ldi	r22, 0x01	; 1
     4c4:	fb cf       	rjmp	.-10     	; 0x4bc <crossFade+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4c6:	c8 01       	movw	r24, r16
     4c8:	b7 01       	movw	r22, r14
     4ca:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4ce:	cb 01       	movw	r24, r22
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <crossFade+0x1ee>
     4d4:	af cf       	rjmp	.-162    	; 0x434 <crossFade+0x152>
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     4d6:	61 e0       	ldi	r22, 0x01	; 1
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	f9 cf       	rjmp	.-14     	; 0x4ce <crossFade+0x1ec>

000004dc <setupFan>:
//Fan is connected on pin 5 (OC2B) as output
//Connect fan using a transistor pair to switch 12V
void setupFan()
{
   //Fan on pin 5 (OC2B)
   DDRD   |= (1 << 3);
     4dc:	53 9a       	sbi	0x0a, 3	; 10

   //Fan starts out off
   OCR2B = 0;
     4de:	10 92 b4 00 	sts	0x00B4, r1
     
   // Set up fan for PWM
   TCCR2A  = ((1 << COM2B1) | (1 << WGM20) | (1 << WGM21));
     4e2:	83 e2       	ldi	r24, 0x23	; 35
     4e4:	80 93 b0 00 	sts	0x00B0, r24
   TCCR2B  = ((1 << CS20) | (0 << CS21) | (0 << CS22) | (0 << WGM22));
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	80 93 b1 00 	sts	0x00B1, r24
   TIMSK2  = (0<<OCIE2B); //Enable Timer2 Overflow Interrupt
     4ee:	10 92 70 00 	sts	0x0070, r1
   sei();
     4f2:	78 94       	sei
}
     4f4:	08 95       	ret

000004f6 <setFanSpeed>:

//Sets fan speed by changing Timer/Counter 2 register for OC2B
void setFanSpeed(char speed)
{
   OCR2B = speed;
     4f6:	80 93 b4 00 	sts	0x00B4, r24
}
     4fa:	08 95       	ret

000004fc <getFanSpeed>:

char getFanSpeed()
{
  return OCR2B;
     4fc:	80 91 b4 00 	lds	r24, 0x00B4
}
     500:	08 95       	ret

00000502 <setupCount>:

void setupCount()
{
  TCCR1A=0;                 // reset timer/counter1 control register A
     502:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=0;              	// reset timer/counter1 control register A
     506:	e1 e8       	ldi	r30, 0x81	; 129
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	10 82       	st	Z, r1
  TCNT1=0;           		// counter value = 0
     50c:	10 92 85 00 	sts	0x0085, r1
     510:	10 92 84 00 	sts	0x0084, r1
  //Clock source on T1, falling edge (fan pulls down)
  TCCR1B = (1 << CS10) | (1 << CS11) | (1 << CS12);
     514:	87 e0       	ldi	r24, 0x07	; 7
     516:	80 83       	st	Z, r24

  //Setup watchdog timer for 1hz refresh
  //WDTCSR = (1 << WDCE);
  //WDTCSR = (1 << WDP0) | (1 << WDP3);
  //WDTCSR = (1 << WDIE);
  WD_SET(WD_IRQ, WDTO_1S);
     518:	96 ec       	ldi	r25, 0xC6	; 198
     51a:	88 e1       	ldi	r24, 0x18	; 24
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	f8 94       	cli
     520:	a8 95       	wdr
     522:	80 93 60 00 	sts	0x0060, r24
     526:	90 93 60 00 	sts	0x0060, r25
     52a:	0f be       	out	0x3f, r0	; 63
}
     52c:	08 95       	ret

0000052e <fanRPM>:

int fanRPM()
{
  return FanRPM;
}
     52e:	80 91 32 02 	lds	r24, 0x0232
     532:	90 91 33 02 	lds	r25, 0x0233
     536:	08 95       	ret

00000538 <__vector_6>:

ISR(WDT_vect)
{
     538:	1f 92       	push	r1
     53a:	0f 92       	push	r0
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	0f 92       	push	r0
     540:	11 24       	eor	r1, r1
     542:	2f 93       	push	r18
     544:	3f 93       	push	r19
     546:	8f 93       	push	r24
     548:	9f 93       	push	r25
     54a:	ef 93       	push	r30
     54c:	ff 93       	push	r31
  FanRPM = TCNT1*30;
     54e:	e4 e8       	ldi	r30, 0x84	; 132
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	20 81       	ld	r18, Z
     554:	31 81       	ldd	r19, Z+1	; 0x01
     556:	c9 01       	movw	r24, r18
     558:	88 0f       	add	r24, r24
     55a:	99 1f       	adc	r25, r25
     55c:	82 0f       	add	r24, r18
     55e:	93 1f       	adc	r25, r19
     560:	9c 01       	movw	r18, r24
     562:	22 0f       	add	r18, r18
     564:	33 1f       	adc	r19, r19
     566:	22 0f       	add	r18, r18
     568:	33 1f       	adc	r19, r19
     56a:	82 0f       	add	r24, r18
     56c:	93 1f       	adc	r25, r19
     56e:	88 0f       	add	r24, r24
     570:	99 1f       	adc	r25, r25
     572:	90 93 33 02 	sts	0x0233, r25
     576:	80 93 32 02 	sts	0x0232, r24
  TCNT1 = 0;
     57a:	11 82       	std	Z+1, r1	; 0x01
     57c:	10 82       	st	Z, r1
}
     57e:	ff 91       	pop	r31
     580:	ef 91       	pop	r30
     582:	9f 91       	pop	r25
     584:	8f 91       	pop	r24
     586:	3f 91       	pop	r19
     588:	2f 91       	pop	r18
     58a:	0f 90       	pop	r0
     58c:	0f be       	out	0x3f, r0	; 63
     58e:	0f 90       	pop	r0
     590:	1f 90       	pop	r1
     592:	18 95       	reti

00000594 <__vector_18>:
unsigned char buffer[64]; //Serial buffer
unsigned char buffer_pos = 0; //Current use of buffer

//USART Receive interrupt pushes the incoming byte into the buffer
ISR(USART_RX_vect)
{
     594:	1f 92       	push	r1
     596:	0f 92       	push	r0
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	0f 92       	push	r0
     59c:	11 24       	eor	r1, r1
     59e:	8f 93       	push	r24
     5a0:	9f 93       	push	r25
     5a2:	ef 93       	push	r30
     5a4:	ff 93       	push	r31
  buffer[buffer_pos] = UDR0;
     5a6:	80 91 34 02 	lds	r24, 0x0234
     5aa:	90 91 c6 00 	lds	r25, 0x00C6
     5ae:	e8 2f       	mov	r30, r24
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	e3 58       	subi	r30, 0x83	; 131
     5b4:	fd 4f       	sbci	r31, 0xFD	; 253
     5b6:	90 83       	st	Z, r25
  //Increment buffer position
  buffer_pos++;
     5b8:	8f 5f       	subi	r24, 0xFF	; 255
     5ba:	80 93 34 02 	sts	0x0234, r24
  if(buffer_pos > 64)
     5be:	81 34       	cpi	r24, 0x41	; 65
     5c0:	10 f0       	brcs	.+4      	; 0x5c6 <__vector_18+0x32>
  {
    buffer_pos = 0;
     5c2:	10 92 34 02 	sts	0x0234, r1
  }
}
     5c6:	ff 91       	pop	r31
     5c8:	ef 91       	pop	r30
     5ca:	9f 91       	pop	r25
     5cc:	8f 91       	pop	r24
     5ce:	0f 90       	pop	r0
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	0f 90       	pop	r0
     5d4:	1f 90       	pop	r1
     5d6:	18 95       	reti

000005d8 <serial_available>:

unsigned char serial_available()
{
  return buffer_pos;
}
     5d8:	80 91 34 02 	lds	r24, 0x0234
     5dc:	08 95       	ret

000005de <serial_init>:

void serial_init(unsigned int baud)
{
	//Set baud rate
	UBRR0H = (unsigned char) (baud >> 8);
     5de:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) (baud);
     5e2:	80 93 c4 00 	sts	0x00C4, r24

	//Set frame format: 8 data, no parity, 2 stop bits
	UCSR0C = (0<<UMSEL00) | (0<<UPM00) | (0<<USBS0) | (3<<UCSZ00);
     5e6:	86 e0       	ldi	r24, 0x06	; 6
     5e8:	80 93 c2 00 	sts	0x00C2, r24

	//Enable receiver and transmitter
	UCSR0B = (1<<RXCIE0 | 1<<RXEN0) | (1<<TXEN0);
     5ec:	88 e9       	ldi	r24, 0x98	; 152
     5ee:	80 93 c1 00 	sts	0x00C1, r24
}
     5f2:	08 95       	ret

000005f4 <serial_read>:

//Buffered read pops the first byte off the buffer
unsigned char serial_read()
{
  if(buffer_pos == 0)
     5f4:	90 91 34 02 	lds	r25, 0x0234
     5f8:	99 23       	and	r25, r25
     5fa:	81 f0       	breq	.+32     	; 0x61c <serial_read+0x28>
  {
    return 0;
  }
  char value = buffer[0];
     5fc:	20 91 7d 02 	lds	r18, 0x027D
     600:	ed e7       	ldi	r30, 0x7D	; 125
     602:	f2 e0       	ldi	r31, 0x02	; 2
  for(char i = 1; i < 64; i++)
  {
    buffer[i-1] = buffer[i];
     604:	81 81       	ldd	r24, Z+1	; 0x01
     606:	81 93       	st	Z+, r24
  if(buffer_pos == 0)
  {
    return 0;
  }
  char value = buffer[0];
  for(char i = 1; i < 64; i++)
     608:	82 e0       	ldi	r24, 0x02	; 2
     60a:	ec 3b       	cpi	r30, 0xBC	; 188
     60c:	f8 07       	cpc	r31, r24
     60e:	d1 f7       	brne	.-12     	; 0x604 <serial_read+0x10>
  {
    buffer[i-1] = buffer[i];
  }
  buffer[63] = 0;
     610:	10 82       	st	Z, r1
  buffer_pos--;
     612:	91 50       	subi	r25, 0x01	; 1
     614:	90 93 34 02 	sts	0x0234, r25

  return value;
}
     618:	82 2f       	mov	r24, r18
     61a:	08 95       	ret
}

//Buffered read pops the first byte off the buffer
unsigned char serial_read()
{
  if(buffer_pos == 0)
     61c:	20 e0       	ldi	r18, 0x00	; 0
  }
  buffer[63] = 0;
  buffer_pos--;

  return value;
}
     61e:	82 2f       	mov	r24, r18
     620:	08 95       	ret

00000622 <serial_flush>:

//Deletes all items in the buffer
void serial_flush()
{
  buffer_pos = 0;
     622:	10 92 34 02 	sts	0x0234, r1
}
     626:	08 95       	ret

00000628 <serial_transmit>:

void serial_transmit(unsigned char data)
{
     628:	98 2f       	mov	r25, r24
	//Wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));
     62a:	80 91 c0 00 	lds	r24, 0x00C0
     62e:	85 ff       	sbrs	r24, 5
     630:	fc cf       	rjmp	.-8      	; 0x62a <serial_transmit+0x2>
	{
	  asm("nop");
     632:	00 00       	nop
	}

	//Put data into buffer, send data
	UDR0 = data;
     634:	90 93 c6 00 	sts	0x00C6, r25
}
     638:	08 95       	ret

0000063a <serial_print>:

void serial_print(char * text)
{
     63a:	fc 01       	movw	r30, r24
	int pos = 0;
	while(text[pos] != '\0')
     63c:	90 81       	ld	r25, Z
     63e:	99 23       	and	r25, r25
     640:	59 f0       	breq	.+22     	; 0x658 <serial_print+0x1e>
}

void serial_transmit(unsigned char data)
{
	//Wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));
     642:	80 91 c0 00 	lds	r24, 0x00C0
     646:	85 ff       	sbrs	r24, 5
     648:	fc cf       	rjmp	.-8      	; 0x642 <serial_print+0x8>
	{
	  asm("nop");
     64a:	00 00       	nop
	}

	//Put data into buffer, send data
	UDR0 = data;
     64c:	90 93 c6 00 	sts	0x00C6, r25
}

void serial_print(char * text)
{
	int pos = 0;
	while(text[pos] != '\0')
     650:	91 81       	ldd	r25, Z+1	; 0x01
     652:	31 96       	adiw	r30, 0x01	; 1
     654:	99 23       	and	r25, r25
     656:	a9 f7       	brne	.-22     	; 0x642 <serial_print+0x8>
     658:	08 95       	ret

0000065a <readFrame>:
char g;
char b;


void readFrame()
{
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	df 93       	push	r29
     664:	cf 93       	push	r28
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     66a:	28 97       	sbiw	r28, 0x08	; 8
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
     676:	10 e0       	ldi	r17, 0x00	; 0
     678:	00 e0       	ldi	r16, 0x00	; 0
     67a:	7e 01       	movw	r14, r28
     67c:	08 94       	sec
     67e:	e1 1c       	adc	r14, r1
     680:	f1 1c       	adc	r15, r1
	unsigned char new_byte;
	unsigned char pos = 0;
	unsigned char frame_size = 0;
	while(complete == 0)
	{
		while(serial_available() == 0)
     682:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <serial_available>
     686:	88 23       	and	r24, r24
     688:	e1 f3       	breq	.-8      	; 0x682 <readFrame+0x28>
		{
		}

		new_byte = serial_read();
     68a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <serial_read>

		if((new_byte & 0x80) == 0x80)
     68e:	87 fd       	sbrc	r24, 7
     690:	30 c0       	rjmp	.+96     	; 0x6f2 <readFrame+0x98>
			pos = 1;
			//enabled = 1;
		}
		else //if(enabled == 1)
		{
			frame[pos] = new_byte;
     692:	f7 01       	movw	r30, r14
     694:	e1 0f       	add	r30, r17
     696:	f1 1d       	adc	r31, r1
     698:	80 83       	st	Z, r24
			
			if(pos == 1)
     69a:	11 30       	cpi	r17, 0x01	; 1
     69c:	69 f1       	breq	.+90     	; 0x6f8 <readFrame+0x9e>
					case 0x60:
						frame_size = 4;
					break;
				}
			}
			else if(pos >= frame_size)
     69e:	10 17       	cp	r17, r16
     6a0:	30 f1       	brcs	.+76     	; 0x6ee <readFrame+0x94>
			}
			pos++;
		}
	}

	if((frame[0] == (address | 0x80)) || (frame[0] == 0x80))
     6a2:	99 81       	ldd	r25, Y+1	; 0x01
     6a4:	20 91 27 01 	lds	r18, 0x0127
     6a8:	82 2f       	mov	r24, r18
     6aa:	80 68       	ori	r24, 0x80	; 128
     6ac:	98 17       	cp	r25, r24
     6ae:	79 f0       	breq	.+30     	; 0x6ce <readFrame+0x74>
     6b0:	90 38       	cpi	r25, 0x80	; 128
     6b2:	69 f0       	breq	.+26     	; 0x6ce <readFrame+0x74>
			}
			break;
		}
		serial_flush();
	}
}
     6b4:	28 96       	adiw	r28, 0x08	; 8
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	f8 94       	cli
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	cd bf       	out	0x3d, r28	; 61
     6c0:	cf 91       	pop	r28
     6c2:	df 91       	pop	r29
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	ff 90       	pop	r15
     6ca:	ef 90       	pop	r14
     6cc:	08 95       	ret
		}
	}

	if((frame[0] == (address | 0x80)) || (frame[0] == 0x80))
	{
		switch(frame[1])
     6ce:	8a 81       	ldd	r24, Y+2	; 0x02
     6d0:	83 30       	cpi	r24, 0x03	; 3
     6d2:	41 f0       	breq	.+16     	; 0x6e4 <readFrame+0x8a>
     6d4:	84 30       	cpi	r24, 0x04	; 4
     6d6:	28 f5       	brcc	.+74     	; 0x722 <readFrame+0xc8>
     6d8:	81 30       	cpi	r24, 0x01	; 1
     6da:	09 f4       	brne	.+2      	; 0x6de <readFrame+0x84>
     6dc:	64 c0       	rjmp	.+200    	; 0x7a6 <readFrame+0x14c>
     6de:	82 30       	cpi	r24, 0x02	; 2
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <readFrame+0x8a>
     6e2:	64 c0       	rjmp	.+200    	; 0x7ac <readFrame+0x152>
			}
			break;

			case 0x03:
			{
				serial_transmit(0x01);
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	0e 94 14 03 	call	0x628	; 0x628 <serial_transmit>
     6ea:	60 c0       	rjmp	.+192    	; 0x7ac <readFrame+0x152>
			}
			pos++;
		}
	}

	if((frame[0] == (address | 0x80)) || (frame[0] == 0x80))
     6ec:	02 e0       	ldi	r16, 0x02	; 2
			else if(pos >= frame_size)
			{
				complete = 1;
				//enabled = 0;
			}
			pos++;
     6ee:	1f 5f       	subi	r17, 0xFF	; 255
     6f0:	c8 cf       	rjmp	.-112    	; 0x682 <readFrame+0x28>

		new_byte = serial_read();

		if((new_byte & 0x80) == 0x80)
		{
			frame[0] = new_byte;
     6f2:	89 83       	std	Y+1, r24	; 0x01
     6f4:	11 e0       	ldi	r17, 0x01	; 1
     6f6:	c5 cf       	rjmp	.-118    	; 0x682 <readFrame+0x28>
		{
			frame[pos] = new_byte;
			
			if(pos == 1)
			{
				switch(new_byte & 0x60)
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	80 76       	andi	r24, 0x60	; 96
     6fc:	90 70       	andi	r25, 0x00	; 0
     6fe:	80 34       	cpi	r24, 0x40	; 64
     700:	91 05       	cpc	r25, r1
     702:	a1 f3       	breq	.-24     	; 0x6ec <readFrame+0x92>
     704:	81 34       	cpi	r24, 0x41	; 65
     706:	91 05       	cpc	r25, r1
     708:	34 f4       	brge	.+12     	; 0x716 <readFrame+0xbc>
     70a:	00 97       	sbiw	r24, 0x00	; 0
     70c:	51 f2       	breq	.-108    	; 0x6a2 <readFrame+0x48>
     70e:	80 97       	sbiw	r24, 0x20	; 32
     710:	41 f2       	breq	.-112    	; 0x6a2 <readFrame+0x48>
char g;
char b;


void readFrame()
{
     712:	12 e0       	ldi	r17, 0x02	; 2
     714:	b6 cf       	rjmp	.-148    	; 0x682 <readFrame+0x28>
		{
			frame[pos] = new_byte;
			
			if(pos == 1)
			{
				switch(new_byte & 0x60)
     716:	80 36       	cpi	r24, 0x60	; 96
     718:	91 05       	cpc	r25, r1
     71a:	d9 f7       	brne	.-10     	; 0x712 <readFrame+0xb8>
     71c:	04 e0       	ldi	r16, 0x04	; 4
			else if(pos >= frame_size)
			{
				complete = 1;
				//enabled = 0;
			}
			pos++;
     71e:	1f 5f       	subi	r17, 0xFF	; 255
     720:	b0 cf       	rjmp	.-160    	; 0x682 <readFrame+0x28>
		}
	}

	if((frame[0] == (address | 0x80)) || (frame[0] == 0x80))
	{
		switch(frame[1])
     722:	81 34       	cpi	r24, 0x41	; 65
     724:	09 f0       	breq	.+2      	; 0x728 <readFrame+0xce>
     726:	45 c0       	rjmp	.+138    	; 0x7b2 <readFrame+0x158>
			}
			break;

			case 0x41:
			{
				if((frame[2] & 0x01) == 0x01)
     728:	8b 81       	ldd	r24, Y+3	; 0x03
     72a:	98 2f       	mov	r25, r24
     72c:	80 ff       	sbrs	r24, 0
     72e:	0c c0       	rjmp	.+24     	; 0x748 <readFrame+0xee>
				{
					compbuff[0] = r;
     730:	80 91 bf 02 	lds	r24, 0x02BF
     734:	80 93 35 02 	sts	0x0235, r24
					compbuff[1] = g;
     738:	80 91 be 02 	lds	r24, 0x02BE
     73c:	80 93 36 02 	sts	0x0236, r24
					compbuff[2] = b;
     740:	80 91 bd 02 	lds	r24, 0x02BD
     744:	80 93 37 02 	sts	0x0237, r24
				}

				if((frame[2] & 0x02) == 0x02)
     748:	91 ff       	sbrs	r25, 1
     74a:	0c c0       	rjmp	.+24     	; 0x764 <readFrame+0x10a>
				{
					compbuff[3] = r;
     74c:	80 91 bf 02 	lds	r24, 0x02BF
     750:	80 93 38 02 	sts	0x0238, r24
					compbuff[4] = g;
     754:	80 91 be 02 	lds	r24, 0x02BE
     758:	80 93 39 02 	sts	0x0239, r24
					compbuff[5] = b;
     75c:	80 91 bd 02 	lds	r24, 0x02BD
     760:	80 93 3a 02 	sts	0x023A, r24
				}

				if((frame[2] & 0x04) == 0x04)
     764:	92 ff       	sbrs	r25, 2
     766:	0c c0       	rjmp	.+24     	; 0x780 <readFrame+0x126>
				{
					compbuff[6] = r;
     768:	80 91 bf 02 	lds	r24, 0x02BF
     76c:	80 93 3b 02 	sts	0x023B, r24
					compbuff[7] = g;
     770:	80 91 be 02 	lds	r24, 0x02BE
     774:	80 93 3c 02 	sts	0x023C, r24
					compbuff[8] = b;
     778:	80 91 bd 02 	lds	r24, 0x02BD
     77c:	80 93 3d 02 	sts	0x023D, r24
				}

				if((frame[2] & 0x08) == 0x08)
     780:	93 ff       	sbrs	r25, 3
     782:	0c c0       	rjmp	.+24     	; 0x79c <readFrame+0x142>
				{
					compbuff[9] = r;
     784:	80 91 bf 02 	lds	r24, 0x02BF
     788:	80 93 3e 02 	sts	0x023E, r24
					compbuff[10] = g;
     78c:	80 91 be 02 	lds	r24, 0x02BE
     790:	80 93 3f 02 	sts	0x023F, r24
					compbuff[11] = b;
     794:	80 91 bd 02 	lds	r24, 0x02BD
     798:	80 93 40 02 	sts	0x0240, r24
				}
				if((frame[2] & 0x40) == 0x40)
     79c:	96 ff       	sbrs	r25, 6
     79e:	03 c0       	rjmp	.+6      	; 0x7a6 <readFrame+0x14c>
				{
					update = 1;
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	80 93 31 02 	sts	0x0231, r24
			case 0x61:
			{
				r = frame[2];
				g = frame[3];
				b = frame[4];
				serial_transmit(address);
     7a6:	82 2f       	mov	r24, r18
     7a8:	0e 94 14 03 	call	0x628	; 0x628 <serial_transmit>
			}
			break;
		}
		serial_flush();
     7ac:	0e 94 11 03 	call	0x622	; 0x622 <serial_flush>
     7b0:	81 cf       	rjmp	.-254    	; 0x6b4 <readFrame+0x5a>
		}
	}

	if((frame[0] == (address | 0x80)) || (frame[0] == 0x80))
	{
		switch(frame[1])
     7b2:	81 36       	cpi	r24, 0x61	; 97
     7b4:	39 f0       	breq	.+14     	; 0x7c4 <readFrame+0x16a>
     7b6:	84 30       	cpi	r24, 0x04	; 4
     7b8:	c9 f7       	brne	.-14     	; 0x7ac <readFrame+0x152>
			}
			break;

			case 0x04:
			{
				serial_print("FanBus 4 RGB LED Fan Controller v1.0");
     7ba:	82 e0       	ldi	r24, 0x02	; 2
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	0e 94 1d 03 	call	0x63a	; 0x63a <serial_print>
     7c2:	f4 cf       	rjmp	.-24     	; 0x7ac <readFrame+0x152>
			}
			break;

			case 0x61:
			{
				r = frame[2];
     7c4:	8b 81       	ldd	r24, Y+3	; 0x03
     7c6:	80 93 bf 02 	sts	0x02BF, r24
				g = frame[3];
     7ca:	8c 81       	ldd	r24, Y+4	; 0x04
     7cc:	80 93 be 02 	sts	0x02BE, r24
				b = frame[4];
     7d0:	8d 81       	ldd	r24, Y+5	; 0x05
     7d2:	80 93 bd 02 	sts	0x02BD, r24
     7d6:	e7 cf       	rjmp	.-50     	; 0x7a6 <readFrame+0x14c>

000007d8 <restoreState>:
  save_fanspeed = getFanSpeed(); 
  eeprom_write_byte((unsigned char*)13,save_fanspeed);
}

void restoreState()
{
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
  for(char i = 0; i < 12; i++)
  {
    compbuff[i] = save_compbuff[i];
     7dc:	f9 01       	movw	r30, r18
     7de:	eb 5c       	subi	r30, 0xCB	; 203
     7e0:	fd 4f       	sbci	r31, 0xFD	; 253
     7e2:	d9 01       	movw	r26, r18
     7e4:	af 53       	subi	r26, 0x3F	; 63
     7e6:	bd 4f       	sbci	r27, 0xFD	; 253
     7e8:	8c 91       	ld	r24, X
     7ea:	80 83       	st	Z, r24
     7ec:	2f 5f       	subi	r18, 0xFF	; 255
     7ee:	3f 4f       	sbci	r19, 0xFF	; 255
  eeprom_write_byte((unsigned char*)13,save_fanspeed);
}

void restoreState()
{
  for(char i = 0; i < 12; i++)
     7f0:	2c 30       	cpi	r18, 0x0C	; 12
     7f2:	31 05       	cpc	r19, r1
     7f4:	99 f7       	brne	.-26     	; 0x7dc <restoreState+0x4>
  {
    compbuff[i] = save_compbuff[i];
  }

  setFanSpeed(save_fanspeed);
     7f6:	80 91 c0 02 	lds	r24, 0x02C0
     7fa:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <setFanSpeed>
}
     7fe:	08 95       	ret

00000800 <readEeprom>:

void readEeprom()
{
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	c1 e0       	ldi	r28, 0x01	; 1
     806:	d0 e0       	ldi	r29, 0x00	; 0
  for(char i = 0; i < 12; i++)
  {
    save_compbuff[i] = eeprom_read_byte((unsigned char*)(i+1));
     808:	ce 01       	movw	r24, r28
     80a:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__eerd_byte_m168>
     80e:	fe 01       	movw	r30, r28
     810:	e0 54       	subi	r30, 0x40	; 64
     812:	fd 4f       	sbci	r31, 0xFD	; 253
     814:	80 83       	st	Z, r24
     816:	21 96       	adiw	r28, 0x01	; 1
  setFanSpeed(save_fanspeed);
}

void readEeprom()
{
  for(char i = 0; i < 12; i++)
     818:	cd 30       	cpi	r28, 0x0D	; 13
     81a:	d1 05       	cpc	r29, r1
     81c:	a9 f7       	brne	.-22     	; 0x808 <readEeprom+0x8>
  {
    save_compbuff[i] = eeprom_read_byte((unsigned char*)(i+1));
  }

  save_fanspeed = eeprom_read_byte((unsigned char*)(13));
     81e:	8d e0       	ldi	r24, 0x0D	; 13
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__eerd_byte_m168>
     826:	80 93 c0 02 	sts	0x02C0, r24
}
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	08 95       	ret

00000830 <startUp>:

void startUp()
{
  readEeprom();
     830:	0e 94 00 04 	call	0x800	; 0x800 <readEeprom>
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
  for(char i = 0; i < 12; i++)
  {
    crossfade[i] = save_compbuff[i];
     838:	f9 01       	movw	r30, r18
     83a:	ef 58       	subi	r30, 0x8F	; 143
     83c:	fd 4f       	sbci	r31, 0xFD	; 253
     83e:	d9 01       	movw	r26, r18
     840:	af 53       	subi	r26, 0x3F	; 63
     842:	bd 4f       	sbci	r27, 0xFD	; 253
     844:	8c 91       	ld	r24, X
     846:	80 83       	st	Z, r24
     848:	2f 5f       	subi	r18, 0xFF	; 255
     84a:	3f 4f       	sbci	r19, 0xFF	; 255
}

void startUp()
{
  readEeprom();
  for(char i = 0; i < 12; i++)
     84c:	2c 30       	cpi	r18, 0x0C	; 12
     84e:	31 05       	cpc	r19, r1
     850:	99 f7       	brne	.-26     	; 0x838 <startUp+0x8>
  {
    crossfade[i] = save_compbuff[i];
  }
  setFanSpeed(255);
     852:	8f ef       	ldi	r24, 0xFF	; 255
     854:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <setFanSpeed>
     858:	88 ec       	ldi	r24, 0xC8	; 200
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	01 97       	sbiw	r24, 0x01	; 1
     85e:	f1 f7       	brne	.-4      	; 0x85c <startUp+0x2c>
  _delay_us(100);
  setFanSpeed(save_fanspeed);
     860:	80 91 c0 02 	lds	r24, 0x02C0
     864:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <setFanSpeed>
  crossFade(100);
     868:	84 e6       	ldi	r24, 0x64	; 100
     86a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <crossFade>
     86e:	e1 e7       	ldi	r30, 0x71	; 113
     870:	f2 e0       	ldi	r31, 0x02	; 2
  for(char i = 0; i < 12; i++)
  {
    crossfade[i] = 0;
     872:	11 92       	st	Z+, r1
  }
  setFanSpeed(255);
  _delay_us(100);
  setFanSpeed(save_fanspeed);
  crossFade(100);
  for(char i = 0; i < 12; i++)
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	ed 37       	cpi	r30, 0x7D	; 125
     878:	f8 07       	cpc	r31, r24
     87a:	d9 f7       	brne	.-10     	; 0x872 <startUp+0x42>
  {
    crossfade[i] = 0;
  }
}
     87c:	08 95       	ret

0000087e <saveState>:

extern unsigned char compbuff[12];
extern char crossfade[12];

void saveState()
{
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	c1 e0       	ldi	r28, 0x01	; 1
     884:	d0 e0       	ldi	r29, 0x00	; 0
  for(char i = 0; i < 12; i++)
  {
    save_compbuff[i] = compbuff[i];
     886:	fe 01       	movw	r30, r28
     888:	ec 5c       	subi	r30, 0xCC	; 204
     88a:	fd 4f       	sbci	r31, 0xFD	; 253
     88c:	60 81       	ld	r22, Z
     88e:	fe 01       	movw	r30, r28
     890:	e0 54       	subi	r30, 0x40	; 64
     892:	fd 4f       	sbci	r31, 0xFD	; 253
     894:	60 83       	st	Z, r22
	eeprom_write_byte((unsigned char*)(i+1),save_compbuff[i]);
     896:	ce 01       	movw	r24, r28
     898:	0e 94 92 0b 	call	0x1724	; 0x1724 <__eewr_byte_m168>
     89c:	21 96       	adiw	r28, 0x01	; 1
extern unsigned char compbuff[12];
extern char crossfade[12];

void saveState()
{
  for(char i = 0; i < 12; i++)
     89e:	cd 30       	cpi	r28, 0x0D	; 13
     8a0:	d1 05       	cpc	r29, r1
     8a2:	89 f7       	brne	.-30     	; 0x886 <saveState+0x8>
  {
    save_compbuff[i] = compbuff[i];
	eeprom_write_byte((unsigned char*)(i+1),save_compbuff[i]);
  }
  
  save_fanspeed = getFanSpeed(); 
     8a4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <getFanSpeed>
     8a8:	68 2f       	mov	r22, r24
     8aa:	80 93 c0 02 	sts	0x02C0, r24
  eeprom_write_byte((unsigned char*)13,save_fanspeed);
     8ae:	8d e0       	ldi	r24, 0x0D	; 13
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	0e 94 92 0b 	call	0x1724	; 0x1724 <__eewr_byte_m168>
}
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <__fixunssfsi>:
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	7b 01       	movw	r14, r22
     8c6:	8c 01       	movw	r16, r24
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	40 e0       	ldi	r20, 0x00	; 0
     8ce:	5f e4       	ldi	r21, 0x4F	; 79
     8d0:	0e 94 0a 08 	call	0x1014	; 0x1014 <__gesf2>
     8d4:	88 23       	and	r24, r24
     8d6:	8c f0       	brlt	.+34     	; 0x8fa <__fixunssfsi+0x3e>
     8d8:	c8 01       	movw	r24, r16
     8da:	b7 01       	movw	r22, r14
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	40 e0       	ldi	r20, 0x00	; 0
     8e2:	5f e4       	ldi	r21, 0x4F	; 79
     8e4:	0e 94 d6 05 	call	0xbac	; 0xbac <__subsf3>
     8e8:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixsfsi>
     8ec:	9b 01       	movw	r18, r22
     8ee:	ac 01       	movw	r20, r24
     8f0:	20 50       	subi	r18, 0x00	; 0
     8f2:	30 40       	sbci	r19, 0x00	; 0
     8f4:	40 40       	sbci	r20, 0x00	; 0
     8f6:	50 48       	sbci	r21, 0x80	; 128
     8f8:	06 c0       	rjmp	.+12     	; 0x906 <__fixunssfsi+0x4a>
     8fa:	c8 01       	movw	r24, r16
     8fc:	b7 01       	movw	r22, r14
     8fe:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixsfsi>
     902:	9b 01       	movw	r18, r22
     904:	ac 01       	movw	r20, r24
     906:	b9 01       	movw	r22, r18
     908:	ca 01       	movw	r24, r20
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	08 95       	ret

00000914 <_fpadd_parts>:
     914:	a0 e0       	ldi	r26, 0x00	; 0
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	e0 e9       	ldi	r30, 0x90	; 144
     91a:	f4 e0       	ldi	r31, 0x04	; 4
     91c:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__prologue_saves__>
     920:	dc 01       	movw	r26, r24
     922:	2b 01       	movw	r4, r22
     924:	fa 01       	movw	r30, r20
     926:	9c 91       	ld	r25, X
     928:	92 30       	cpi	r25, 0x02	; 2
     92a:	08 f4       	brcc	.+2      	; 0x92e <_fpadd_parts+0x1a>
     92c:	39 c1       	rjmp	.+626    	; 0xba0 <_fpadd_parts+0x28c>
     92e:	eb 01       	movw	r28, r22
     930:	88 81       	ld	r24, Y
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	08 f4       	brcc	.+2      	; 0x938 <_fpadd_parts+0x24>
     936:	33 c1       	rjmp	.+614    	; 0xb9e <_fpadd_parts+0x28a>
     938:	94 30       	cpi	r25, 0x04	; 4
     93a:	69 f4       	brne	.+26     	; 0x956 <_fpadd_parts+0x42>
     93c:	84 30       	cpi	r24, 0x04	; 4
     93e:	09 f0       	breq	.+2      	; 0x942 <_fpadd_parts+0x2e>
     940:	2f c1       	rjmp	.+606    	; 0xba0 <_fpadd_parts+0x28c>
     942:	11 96       	adiw	r26, 0x01	; 1
     944:	9c 91       	ld	r25, X
     946:	11 97       	sbiw	r26, 0x01	; 1
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	98 17       	cp	r25, r24
     94c:	09 f4       	brne	.+2      	; 0x950 <_fpadd_parts+0x3c>
     94e:	28 c1       	rjmp	.+592    	; 0xba0 <_fpadd_parts+0x28c>
     950:	a8 e2       	ldi	r26, 0x28	; 40
     952:	b1 e0       	ldi	r27, 0x01	; 1
     954:	25 c1       	rjmp	.+586    	; 0xba0 <_fpadd_parts+0x28c>
     956:	84 30       	cpi	r24, 0x04	; 4
     958:	09 f4       	brne	.+2      	; 0x95c <_fpadd_parts+0x48>
     95a:	21 c1       	rjmp	.+578    	; 0xb9e <_fpadd_parts+0x28a>
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	a9 f4       	brne	.+42     	; 0x98a <_fpadd_parts+0x76>
     960:	92 30       	cpi	r25, 0x02	; 2
     962:	09 f0       	breq	.+2      	; 0x966 <_fpadd_parts+0x52>
     964:	1d c1       	rjmp	.+570    	; 0xba0 <_fpadd_parts+0x28c>
     966:	9a 01       	movw	r18, r20
     968:	ad 01       	movw	r20, r26
     96a:	88 e0       	ldi	r24, 0x08	; 8
     96c:	ea 01       	movw	r28, r20
     96e:	09 90       	ld	r0, Y+
     970:	ae 01       	movw	r20, r28
     972:	e9 01       	movw	r28, r18
     974:	09 92       	st	Y+, r0
     976:	9e 01       	movw	r18, r28
     978:	81 50       	subi	r24, 0x01	; 1
     97a:	c1 f7       	brne	.-16     	; 0x96c <_fpadd_parts+0x58>
     97c:	e2 01       	movw	r28, r4
     97e:	89 81       	ldd	r24, Y+1	; 0x01
     980:	11 96       	adiw	r26, 0x01	; 1
     982:	9c 91       	ld	r25, X
     984:	89 23       	and	r24, r25
     986:	81 83       	std	Z+1, r24	; 0x01
     988:	08 c1       	rjmp	.+528    	; 0xb9a <_fpadd_parts+0x286>
     98a:	92 30       	cpi	r25, 0x02	; 2
     98c:	09 f4       	brne	.+2      	; 0x990 <_fpadd_parts+0x7c>
     98e:	07 c1       	rjmp	.+526    	; 0xb9e <_fpadd_parts+0x28a>
     990:	12 96       	adiw	r26, 0x02	; 2
     992:	2d 90       	ld	r2, X+
     994:	3c 90       	ld	r3, X
     996:	13 97       	sbiw	r26, 0x03	; 3
     998:	eb 01       	movw	r28, r22
     99a:	8a 81       	ldd	r24, Y+2	; 0x02
     99c:	9b 81       	ldd	r25, Y+3	; 0x03
     99e:	14 96       	adiw	r26, 0x04	; 4
     9a0:	ad 90       	ld	r10, X+
     9a2:	bd 90       	ld	r11, X+
     9a4:	cd 90       	ld	r12, X+
     9a6:	dc 90       	ld	r13, X
     9a8:	17 97       	sbiw	r26, 0x07	; 7
     9aa:	ec 80       	ldd	r14, Y+4	; 0x04
     9ac:	fd 80       	ldd	r15, Y+5	; 0x05
     9ae:	0e 81       	ldd	r16, Y+6	; 0x06
     9b0:	1f 81       	ldd	r17, Y+7	; 0x07
     9b2:	91 01       	movw	r18, r2
     9b4:	28 1b       	sub	r18, r24
     9b6:	39 0b       	sbc	r19, r25
     9b8:	b9 01       	movw	r22, r18
     9ba:	37 ff       	sbrs	r19, 7
     9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <_fpadd_parts+0xb2>
     9be:	66 27       	eor	r22, r22
     9c0:	77 27       	eor	r23, r23
     9c2:	62 1b       	sub	r22, r18
     9c4:	73 0b       	sbc	r23, r19
     9c6:	60 32       	cpi	r22, 0x20	; 32
     9c8:	71 05       	cpc	r23, r1
     9ca:	0c f0       	brlt	.+2      	; 0x9ce <_fpadd_parts+0xba>
     9cc:	61 c0       	rjmp	.+194    	; 0xa90 <_fpadd_parts+0x17c>
     9ce:	12 16       	cp	r1, r18
     9d0:	13 06       	cpc	r1, r19
     9d2:	6c f5       	brge	.+90     	; 0xa2e <_fpadd_parts+0x11a>
     9d4:	37 01       	movw	r6, r14
     9d6:	48 01       	movw	r8, r16
     9d8:	06 2e       	mov	r0, r22
     9da:	04 c0       	rjmp	.+8      	; 0x9e4 <_fpadd_parts+0xd0>
     9dc:	96 94       	lsr	r9
     9de:	87 94       	ror	r8
     9e0:	77 94       	ror	r7
     9e2:	67 94       	ror	r6
     9e4:	0a 94       	dec	r0
     9e6:	d2 f7       	brpl	.-12     	; 0x9dc <_fpadd_parts+0xc8>
     9e8:	21 e0       	ldi	r18, 0x01	; 1
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	04 c0       	rjmp	.+8      	; 0x9fa <_fpadd_parts+0xe6>
     9f2:	22 0f       	add	r18, r18
     9f4:	33 1f       	adc	r19, r19
     9f6:	44 1f       	adc	r20, r20
     9f8:	55 1f       	adc	r21, r21
     9fa:	6a 95       	dec	r22
     9fc:	d2 f7       	brpl	.-12     	; 0x9f2 <_fpadd_parts+0xde>
     9fe:	21 50       	subi	r18, 0x01	; 1
     a00:	30 40       	sbci	r19, 0x00	; 0
     a02:	40 40       	sbci	r20, 0x00	; 0
     a04:	50 40       	sbci	r21, 0x00	; 0
     a06:	2e 21       	and	r18, r14
     a08:	3f 21       	and	r19, r15
     a0a:	40 23       	and	r20, r16
     a0c:	51 23       	and	r21, r17
     a0e:	21 15       	cp	r18, r1
     a10:	31 05       	cpc	r19, r1
     a12:	41 05       	cpc	r20, r1
     a14:	51 05       	cpc	r21, r1
     a16:	21 f0       	breq	.+8      	; 0xa20 <_fpadd_parts+0x10c>
     a18:	21 e0       	ldi	r18, 0x01	; 1
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	40 e0       	ldi	r20, 0x00	; 0
     a1e:	50 e0       	ldi	r21, 0x00	; 0
     a20:	79 01       	movw	r14, r18
     a22:	8a 01       	movw	r16, r20
     a24:	e6 28       	or	r14, r6
     a26:	f7 28       	or	r15, r7
     a28:	08 29       	or	r16, r8
     a2a:	19 29       	or	r17, r9
     a2c:	3c c0       	rjmp	.+120    	; 0xaa6 <_fpadd_parts+0x192>
     a2e:	23 2b       	or	r18, r19
     a30:	d1 f1       	breq	.+116    	; 0xaa6 <_fpadd_parts+0x192>
     a32:	26 0e       	add	r2, r22
     a34:	37 1e       	adc	r3, r23
     a36:	35 01       	movw	r6, r10
     a38:	46 01       	movw	r8, r12
     a3a:	06 2e       	mov	r0, r22
     a3c:	04 c0       	rjmp	.+8      	; 0xa46 <_fpadd_parts+0x132>
     a3e:	96 94       	lsr	r9
     a40:	87 94       	ror	r8
     a42:	77 94       	ror	r7
     a44:	67 94       	ror	r6
     a46:	0a 94       	dec	r0
     a48:	d2 f7       	brpl	.-12     	; 0xa3e <_fpadd_parts+0x12a>
     a4a:	21 e0       	ldi	r18, 0x01	; 1
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <_fpadd_parts+0x148>
     a54:	22 0f       	add	r18, r18
     a56:	33 1f       	adc	r19, r19
     a58:	44 1f       	adc	r20, r20
     a5a:	55 1f       	adc	r21, r21
     a5c:	6a 95       	dec	r22
     a5e:	d2 f7       	brpl	.-12     	; 0xa54 <_fpadd_parts+0x140>
     a60:	21 50       	subi	r18, 0x01	; 1
     a62:	30 40       	sbci	r19, 0x00	; 0
     a64:	40 40       	sbci	r20, 0x00	; 0
     a66:	50 40       	sbci	r21, 0x00	; 0
     a68:	2a 21       	and	r18, r10
     a6a:	3b 21       	and	r19, r11
     a6c:	4c 21       	and	r20, r12
     a6e:	5d 21       	and	r21, r13
     a70:	21 15       	cp	r18, r1
     a72:	31 05       	cpc	r19, r1
     a74:	41 05       	cpc	r20, r1
     a76:	51 05       	cpc	r21, r1
     a78:	21 f0       	breq	.+8      	; 0xa82 <_fpadd_parts+0x16e>
     a7a:	21 e0       	ldi	r18, 0x01	; 1
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	40 e0       	ldi	r20, 0x00	; 0
     a80:	50 e0       	ldi	r21, 0x00	; 0
     a82:	59 01       	movw	r10, r18
     a84:	6a 01       	movw	r12, r20
     a86:	a6 28       	or	r10, r6
     a88:	b7 28       	or	r11, r7
     a8a:	c8 28       	or	r12, r8
     a8c:	d9 28       	or	r13, r9
     a8e:	0b c0       	rjmp	.+22     	; 0xaa6 <_fpadd_parts+0x192>
     a90:	82 15       	cp	r24, r2
     a92:	93 05       	cpc	r25, r3
     a94:	2c f0       	brlt	.+10     	; 0xaa0 <_fpadd_parts+0x18c>
     a96:	1c 01       	movw	r2, r24
     a98:	aa 24       	eor	r10, r10
     a9a:	bb 24       	eor	r11, r11
     a9c:	65 01       	movw	r12, r10
     a9e:	03 c0       	rjmp	.+6      	; 0xaa6 <_fpadd_parts+0x192>
     aa0:	ee 24       	eor	r14, r14
     aa2:	ff 24       	eor	r15, r15
     aa4:	87 01       	movw	r16, r14
     aa6:	11 96       	adiw	r26, 0x01	; 1
     aa8:	9c 91       	ld	r25, X
     aaa:	d2 01       	movw	r26, r4
     aac:	11 96       	adiw	r26, 0x01	; 1
     aae:	8c 91       	ld	r24, X
     ab0:	98 17       	cp	r25, r24
     ab2:	09 f4       	brne	.+2      	; 0xab6 <_fpadd_parts+0x1a2>
     ab4:	45 c0       	rjmp	.+138    	; 0xb40 <_fpadd_parts+0x22c>
     ab6:	99 23       	and	r25, r25
     ab8:	39 f0       	breq	.+14     	; 0xac8 <_fpadd_parts+0x1b4>
     aba:	a8 01       	movw	r20, r16
     abc:	97 01       	movw	r18, r14
     abe:	2a 19       	sub	r18, r10
     ac0:	3b 09       	sbc	r19, r11
     ac2:	4c 09       	sbc	r20, r12
     ac4:	5d 09       	sbc	r21, r13
     ac6:	06 c0       	rjmp	.+12     	; 0xad4 <_fpadd_parts+0x1c0>
     ac8:	a6 01       	movw	r20, r12
     aca:	95 01       	movw	r18, r10
     acc:	2e 19       	sub	r18, r14
     ace:	3f 09       	sbc	r19, r15
     ad0:	40 0b       	sbc	r20, r16
     ad2:	51 0b       	sbc	r21, r17
     ad4:	57 fd       	sbrc	r21, 7
     ad6:	08 c0       	rjmp	.+16     	; 0xae8 <_fpadd_parts+0x1d4>
     ad8:	11 82       	std	Z+1, r1	; 0x01
     ada:	33 82       	std	Z+3, r3	; 0x03
     adc:	22 82       	std	Z+2, r2	; 0x02
     ade:	24 83       	std	Z+4, r18	; 0x04
     ae0:	35 83       	std	Z+5, r19	; 0x05
     ae2:	46 83       	std	Z+6, r20	; 0x06
     ae4:	57 83       	std	Z+7, r21	; 0x07
     ae6:	1d c0       	rjmp	.+58     	; 0xb22 <_fpadd_parts+0x20e>
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	81 83       	std	Z+1, r24	; 0x01
     aec:	33 82       	std	Z+3, r3	; 0x03
     aee:	22 82       	std	Z+2, r2	; 0x02
     af0:	88 27       	eor	r24, r24
     af2:	99 27       	eor	r25, r25
     af4:	dc 01       	movw	r26, r24
     af6:	82 1b       	sub	r24, r18
     af8:	93 0b       	sbc	r25, r19
     afa:	a4 0b       	sbc	r26, r20
     afc:	b5 0b       	sbc	r27, r21
     afe:	84 83       	std	Z+4, r24	; 0x04
     b00:	95 83       	std	Z+5, r25	; 0x05
     b02:	a6 83       	std	Z+6, r26	; 0x06
     b04:	b7 83       	std	Z+7, r27	; 0x07
     b06:	0d c0       	rjmp	.+26     	; 0xb22 <_fpadd_parts+0x20e>
     b08:	22 0f       	add	r18, r18
     b0a:	33 1f       	adc	r19, r19
     b0c:	44 1f       	adc	r20, r20
     b0e:	55 1f       	adc	r21, r21
     b10:	24 83       	std	Z+4, r18	; 0x04
     b12:	35 83       	std	Z+5, r19	; 0x05
     b14:	46 83       	std	Z+6, r20	; 0x06
     b16:	57 83       	std	Z+7, r21	; 0x07
     b18:	82 81       	ldd	r24, Z+2	; 0x02
     b1a:	93 81       	ldd	r25, Z+3	; 0x03
     b1c:	01 97       	sbiw	r24, 0x01	; 1
     b1e:	93 83       	std	Z+3, r25	; 0x03
     b20:	82 83       	std	Z+2, r24	; 0x02
     b22:	24 81       	ldd	r18, Z+4	; 0x04
     b24:	35 81       	ldd	r19, Z+5	; 0x05
     b26:	46 81       	ldd	r20, Z+6	; 0x06
     b28:	57 81       	ldd	r21, Z+7	; 0x07
     b2a:	da 01       	movw	r26, r20
     b2c:	c9 01       	movw	r24, r18
     b2e:	01 97       	sbiw	r24, 0x01	; 1
     b30:	a1 09       	sbc	r26, r1
     b32:	b1 09       	sbc	r27, r1
     b34:	8f 5f       	subi	r24, 0xFF	; 255
     b36:	9f 4f       	sbci	r25, 0xFF	; 255
     b38:	af 4f       	sbci	r26, 0xFF	; 255
     b3a:	bf 43       	sbci	r27, 0x3F	; 63
     b3c:	28 f3       	brcs	.-54     	; 0xb08 <_fpadd_parts+0x1f4>
     b3e:	0b c0       	rjmp	.+22     	; 0xb56 <_fpadd_parts+0x242>
     b40:	91 83       	std	Z+1, r25	; 0x01
     b42:	33 82       	std	Z+3, r3	; 0x03
     b44:	22 82       	std	Z+2, r2	; 0x02
     b46:	ea 0c       	add	r14, r10
     b48:	fb 1c       	adc	r15, r11
     b4a:	0c 1d       	adc	r16, r12
     b4c:	1d 1d       	adc	r17, r13
     b4e:	e4 82       	std	Z+4, r14	; 0x04
     b50:	f5 82       	std	Z+5, r15	; 0x05
     b52:	06 83       	std	Z+6, r16	; 0x06
     b54:	17 83       	std	Z+7, r17	; 0x07
     b56:	83 e0       	ldi	r24, 0x03	; 3
     b58:	80 83       	st	Z, r24
     b5a:	24 81       	ldd	r18, Z+4	; 0x04
     b5c:	35 81       	ldd	r19, Z+5	; 0x05
     b5e:	46 81       	ldd	r20, Z+6	; 0x06
     b60:	57 81       	ldd	r21, Z+7	; 0x07
     b62:	57 ff       	sbrs	r21, 7
     b64:	1a c0       	rjmp	.+52     	; 0xb9a <_fpadd_parts+0x286>
     b66:	c9 01       	movw	r24, r18
     b68:	aa 27       	eor	r26, r26
     b6a:	97 fd       	sbrc	r25, 7
     b6c:	a0 95       	com	r26
     b6e:	ba 2f       	mov	r27, r26
     b70:	81 70       	andi	r24, 0x01	; 1
     b72:	90 70       	andi	r25, 0x00	; 0
     b74:	a0 70       	andi	r26, 0x00	; 0
     b76:	b0 70       	andi	r27, 0x00	; 0
     b78:	56 95       	lsr	r21
     b7a:	47 95       	ror	r20
     b7c:	37 95       	ror	r19
     b7e:	27 95       	ror	r18
     b80:	82 2b       	or	r24, r18
     b82:	93 2b       	or	r25, r19
     b84:	a4 2b       	or	r26, r20
     b86:	b5 2b       	or	r27, r21
     b88:	84 83       	std	Z+4, r24	; 0x04
     b8a:	95 83       	std	Z+5, r25	; 0x05
     b8c:	a6 83       	std	Z+6, r26	; 0x06
     b8e:	b7 83       	std	Z+7, r27	; 0x07
     b90:	82 81       	ldd	r24, Z+2	; 0x02
     b92:	93 81       	ldd	r25, Z+3	; 0x03
     b94:	01 96       	adiw	r24, 0x01	; 1
     b96:	93 83       	std	Z+3, r25	; 0x03
     b98:	82 83       	std	Z+2, r24	; 0x02
     b9a:	df 01       	movw	r26, r30
     b9c:	01 c0       	rjmp	.+2      	; 0xba0 <_fpadd_parts+0x28c>
     b9e:	d2 01       	movw	r26, r4
     ba0:	cd 01       	movw	r24, r26
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	e2 e1       	ldi	r30, 0x12	; 18
     ba8:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__epilogue_restores__>

00000bac <__subsf3>:
     bac:	a0 e2       	ldi	r26, 0x20	; 32
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	ec ed       	ldi	r30, 0xDC	; 220
     bb2:	f5 e0       	ldi	r31, 0x05	; 5
     bb4:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__prologue_saves__+0x18>
     bb8:	69 83       	std	Y+1, r22	; 0x01
     bba:	7a 83       	std	Y+2, r23	; 0x02
     bbc:	8b 83       	std	Y+3, r24	; 0x03
     bbe:	9c 83       	std	Y+4, r25	; 0x04
     bc0:	2d 83       	std	Y+5, r18	; 0x05
     bc2:	3e 83       	std	Y+6, r19	; 0x06
     bc4:	4f 83       	std	Y+7, r20	; 0x07
     bc6:	58 87       	std	Y+8, r21	; 0x08
     bc8:	e9 e0       	ldi	r30, 0x09	; 9
     bca:	ee 2e       	mov	r14, r30
     bcc:	f1 2c       	mov	r15, r1
     bce:	ec 0e       	add	r14, r28
     bd0:	fd 1e       	adc	r15, r29
     bd2:	ce 01       	movw	r24, r28
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	b7 01       	movw	r22, r14
     bd8:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__unpack_f>
     bdc:	8e 01       	movw	r16, r28
     bde:	0f 5e       	subi	r16, 0xEF	; 239
     be0:	1f 4f       	sbci	r17, 0xFF	; 255
     be2:	ce 01       	movw	r24, r28
     be4:	05 96       	adiw	r24, 0x05	; 5
     be6:	b8 01       	movw	r22, r16
     be8:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__unpack_f>
     bec:	8a 89       	ldd	r24, Y+18	; 0x12
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	89 27       	eor	r24, r25
     bf2:	8a 8b       	std	Y+18, r24	; 0x12
     bf4:	c7 01       	movw	r24, r14
     bf6:	b8 01       	movw	r22, r16
     bf8:	ae 01       	movw	r20, r28
     bfa:	47 5e       	subi	r20, 0xE7	; 231
     bfc:	5f 4f       	sbci	r21, 0xFF	; 255
     bfe:	0e 94 8a 04 	call	0x914	; 0x914 <_fpadd_parts>
     c02:	0e 94 86 09 	call	0x130c	; 0x130c <__pack_f>
     c06:	a0 96       	adiw	r28, 0x20	; 32
     c08:	e6 e0       	ldi	r30, 0x06	; 6
     c0a:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__epilogue_restores__+0x18>

00000c0e <__addsf3>:
     c0e:	a0 e2       	ldi	r26, 0x20	; 32
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	ed e0       	ldi	r30, 0x0D	; 13
     c14:	f6 e0       	ldi	r31, 0x06	; 6
     c16:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__prologue_saves__+0x18>
     c1a:	69 83       	std	Y+1, r22	; 0x01
     c1c:	7a 83       	std	Y+2, r23	; 0x02
     c1e:	8b 83       	std	Y+3, r24	; 0x03
     c20:	9c 83       	std	Y+4, r25	; 0x04
     c22:	2d 83       	std	Y+5, r18	; 0x05
     c24:	3e 83       	std	Y+6, r19	; 0x06
     c26:	4f 83       	std	Y+7, r20	; 0x07
     c28:	58 87       	std	Y+8, r21	; 0x08
     c2a:	f9 e0       	ldi	r31, 0x09	; 9
     c2c:	ef 2e       	mov	r14, r31
     c2e:	f1 2c       	mov	r15, r1
     c30:	ec 0e       	add	r14, r28
     c32:	fd 1e       	adc	r15, r29
     c34:	ce 01       	movw	r24, r28
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	b7 01       	movw	r22, r14
     c3a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__unpack_f>
     c3e:	8e 01       	movw	r16, r28
     c40:	0f 5e       	subi	r16, 0xEF	; 239
     c42:	1f 4f       	sbci	r17, 0xFF	; 255
     c44:	ce 01       	movw	r24, r28
     c46:	05 96       	adiw	r24, 0x05	; 5
     c48:	b8 01       	movw	r22, r16
     c4a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__unpack_f>
     c4e:	c7 01       	movw	r24, r14
     c50:	b8 01       	movw	r22, r16
     c52:	ae 01       	movw	r20, r28
     c54:	47 5e       	subi	r20, 0xE7	; 231
     c56:	5f 4f       	sbci	r21, 0xFF	; 255
     c58:	0e 94 8a 04 	call	0x914	; 0x914 <_fpadd_parts>
     c5c:	0e 94 86 09 	call	0x130c	; 0x130c <__pack_f>
     c60:	a0 96       	adiw	r28, 0x20	; 32
     c62:	e6 e0       	ldi	r30, 0x06	; 6
     c64:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__epilogue_restores__+0x18>

00000c68 <__mulsf3>:
     c68:	a0 e2       	ldi	r26, 0x20	; 32
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	ea e3       	ldi	r30, 0x3A	; 58
     c6e:	f6 e0       	ldi	r31, 0x06	; 6
     c70:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__prologue_saves__>
     c74:	69 83       	std	Y+1, r22	; 0x01
     c76:	7a 83       	std	Y+2, r23	; 0x02
     c78:	8b 83       	std	Y+3, r24	; 0x03
     c7a:	9c 83       	std	Y+4, r25	; 0x04
     c7c:	2d 83       	std	Y+5, r18	; 0x05
     c7e:	3e 83       	std	Y+6, r19	; 0x06
     c80:	4f 83       	std	Y+7, r20	; 0x07
     c82:	58 87       	std	Y+8, r21	; 0x08
     c84:	ce 01       	movw	r24, r28
     c86:	01 96       	adiw	r24, 0x01	; 1
     c88:	be 01       	movw	r22, r28
     c8a:	67 5f       	subi	r22, 0xF7	; 247
     c8c:	7f 4f       	sbci	r23, 0xFF	; 255
     c8e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__unpack_f>
     c92:	ce 01       	movw	r24, r28
     c94:	05 96       	adiw	r24, 0x05	; 5
     c96:	be 01       	movw	r22, r28
     c98:	6f 5e       	subi	r22, 0xEF	; 239
     c9a:	7f 4f       	sbci	r23, 0xFF	; 255
     c9c:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__unpack_f>
     ca0:	99 85       	ldd	r25, Y+9	; 0x09
     ca2:	92 30       	cpi	r25, 0x02	; 2
     ca4:	88 f0       	brcs	.+34     	; 0xcc8 <__mulsf3+0x60>
     ca6:	89 89       	ldd	r24, Y+17	; 0x11
     ca8:	82 30       	cpi	r24, 0x02	; 2
     caa:	c8 f0       	brcs	.+50     	; 0xcde <__mulsf3+0x76>
     cac:	94 30       	cpi	r25, 0x04	; 4
     cae:	19 f4       	brne	.+6      	; 0xcb6 <__mulsf3+0x4e>
     cb0:	82 30       	cpi	r24, 0x02	; 2
     cb2:	51 f4       	brne	.+20     	; 0xcc8 <__mulsf3+0x60>
     cb4:	04 c0       	rjmp	.+8      	; 0xcbe <__mulsf3+0x56>
     cb6:	84 30       	cpi	r24, 0x04	; 4
     cb8:	29 f4       	brne	.+10     	; 0xcc4 <__mulsf3+0x5c>
     cba:	92 30       	cpi	r25, 0x02	; 2
     cbc:	81 f4       	brne	.+32     	; 0xcde <__mulsf3+0x76>
     cbe:	88 e2       	ldi	r24, 0x28	; 40
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	c6 c0       	rjmp	.+396    	; 0xe50 <__mulsf3+0x1e8>
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	49 f4       	brne	.+18     	; 0xcda <__mulsf3+0x72>
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	9a 85       	ldd	r25, Y+10	; 0x0a
     ccc:	8a 89       	ldd	r24, Y+18	; 0x12
     cce:	98 13       	cpse	r25, r24
     cd0:	21 e0       	ldi	r18, 0x01	; 1
     cd2:	2a 87       	std	Y+10, r18	; 0x0a
     cd4:	ce 01       	movw	r24, r28
     cd6:	09 96       	adiw	r24, 0x09	; 9
     cd8:	bb c0       	rjmp	.+374    	; 0xe50 <__mulsf3+0x1e8>
     cda:	82 30       	cpi	r24, 0x02	; 2
     cdc:	49 f4       	brne	.+18     	; 0xcf0 <__mulsf3+0x88>
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce2:	8a 89       	ldd	r24, Y+18	; 0x12
     ce4:	98 13       	cpse	r25, r24
     ce6:	21 e0       	ldi	r18, 0x01	; 1
     ce8:	2a 8b       	std	Y+18, r18	; 0x12
     cea:	ce 01       	movw	r24, r28
     cec:	41 96       	adiw	r24, 0x11	; 17
     cee:	b0 c0       	rjmp	.+352    	; 0xe50 <__mulsf3+0x1e8>
     cf0:	2d 84       	ldd	r2, Y+13	; 0x0d
     cf2:	3e 84       	ldd	r3, Y+14	; 0x0e
     cf4:	4f 84       	ldd	r4, Y+15	; 0x0f
     cf6:	58 88       	ldd	r5, Y+16	; 0x10
     cf8:	6d 88       	ldd	r6, Y+21	; 0x15
     cfa:	7e 88       	ldd	r7, Y+22	; 0x16
     cfc:	8f 88       	ldd	r8, Y+23	; 0x17
     cfe:	98 8c       	ldd	r9, Y+24	; 0x18
     d00:	ee 24       	eor	r14, r14
     d02:	ff 24       	eor	r15, r15
     d04:	87 01       	movw	r16, r14
     d06:	aa 24       	eor	r10, r10
     d08:	bb 24       	eor	r11, r11
     d0a:	65 01       	movw	r12, r10
     d0c:	40 e0       	ldi	r20, 0x00	; 0
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	e0 e0       	ldi	r30, 0x00	; 0
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	c1 01       	movw	r24, r2
     d1a:	81 70       	andi	r24, 0x01	; 1
     d1c:	90 70       	andi	r25, 0x00	; 0
     d1e:	89 2b       	or	r24, r25
     d20:	e9 f0       	breq	.+58     	; 0xd5c <__mulsf3+0xf4>
     d22:	e6 0c       	add	r14, r6
     d24:	f7 1c       	adc	r15, r7
     d26:	08 1d       	adc	r16, r8
     d28:	19 1d       	adc	r17, r9
     d2a:	9a 01       	movw	r18, r20
     d2c:	ab 01       	movw	r20, r22
     d2e:	2a 0d       	add	r18, r10
     d30:	3b 1d       	adc	r19, r11
     d32:	4c 1d       	adc	r20, r12
     d34:	5d 1d       	adc	r21, r13
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	a0 e0       	ldi	r26, 0x00	; 0
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e6 14       	cp	r14, r6
     d40:	f7 04       	cpc	r15, r7
     d42:	08 05       	cpc	r16, r8
     d44:	19 05       	cpc	r17, r9
     d46:	20 f4       	brcc	.+8      	; 0xd50 <__mulsf3+0xe8>
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	a0 e0       	ldi	r26, 0x00	; 0
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	ba 01       	movw	r22, r20
     d52:	a9 01       	movw	r20, r18
     d54:	48 0f       	add	r20, r24
     d56:	59 1f       	adc	r21, r25
     d58:	6a 1f       	adc	r22, r26
     d5a:	7b 1f       	adc	r23, r27
     d5c:	aa 0c       	add	r10, r10
     d5e:	bb 1c       	adc	r11, r11
     d60:	cc 1c       	adc	r12, r12
     d62:	dd 1c       	adc	r13, r13
     d64:	97 fe       	sbrs	r9, 7
     d66:	08 c0       	rjmp	.+16     	; 0xd78 <__mulsf3+0x110>
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	a0 e0       	ldi	r26, 0x00	; 0
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	a8 2a       	or	r10, r24
     d72:	b9 2a       	or	r11, r25
     d74:	ca 2a       	or	r12, r26
     d76:	db 2a       	or	r13, r27
     d78:	31 96       	adiw	r30, 0x01	; 1
     d7a:	e0 32       	cpi	r30, 0x20	; 32
     d7c:	f1 05       	cpc	r31, r1
     d7e:	49 f0       	breq	.+18     	; 0xd92 <__mulsf3+0x12a>
     d80:	66 0c       	add	r6, r6
     d82:	77 1c       	adc	r7, r7
     d84:	88 1c       	adc	r8, r8
     d86:	99 1c       	adc	r9, r9
     d88:	56 94       	lsr	r5
     d8a:	47 94       	ror	r4
     d8c:	37 94       	ror	r3
     d8e:	27 94       	ror	r2
     d90:	c3 cf       	rjmp	.-122    	; 0xd18 <__mulsf3+0xb0>
     d92:	fa 85       	ldd	r31, Y+10	; 0x0a
     d94:	ea 89       	ldd	r30, Y+18	; 0x12
     d96:	2b 89       	ldd	r18, Y+19	; 0x13
     d98:	3c 89       	ldd	r19, Y+20	; 0x14
     d9a:	8b 85       	ldd	r24, Y+11	; 0x0b
     d9c:	9c 85       	ldd	r25, Y+12	; 0x0c
     d9e:	28 0f       	add	r18, r24
     da0:	39 1f       	adc	r19, r25
     da2:	2e 5f       	subi	r18, 0xFE	; 254
     da4:	3f 4f       	sbci	r19, 0xFF	; 255
     da6:	17 c0       	rjmp	.+46     	; 0xdd6 <__mulsf3+0x16e>
     da8:	ca 01       	movw	r24, r20
     daa:	81 70       	andi	r24, 0x01	; 1
     dac:	90 70       	andi	r25, 0x00	; 0
     dae:	89 2b       	or	r24, r25
     db0:	61 f0       	breq	.+24     	; 0xdca <__mulsf3+0x162>
     db2:	16 95       	lsr	r17
     db4:	07 95       	ror	r16
     db6:	f7 94       	ror	r15
     db8:	e7 94       	ror	r14
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	a0 e0       	ldi	r26, 0x00	; 0
     dc0:	b0 e8       	ldi	r27, 0x80	; 128
     dc2:	e8 2a       	or	r14, r24
     dc4:	f9 2a       	or	r15, r25
     dc6:	0a 2b       	or	r16, r26
     dc8:	1b 2b       	or	r17, r27
     dca:	76 95       	lsr	r23
     dcc:	67 95       	ror	r22
     dce:	57 95       	ror	r21
     dd0:	47 95       	ror	r20
     dd2:	2f 5f       	subi	r18, 0xFF	; 255
     dd4:	3f 4f       	sbci	r19, 0xFF	; 255
     dd6:	77 fd       	sbrc	r23, 7
     dd8:	e7 cf       	rjmp	.-50     	; 0xda8 <__mulsf3+0x140>
     dda:	0c c0       	rjmp	.+24     	; 0xdf4 <__mulsf3+0x18c>
     ddc:	44 0f       	add	r20, r20
     dde:	55 1f       	adc	r21, r21
     de0:	66 1f       	adc	r22, r22
     de2:	77 1f       	adc	r23, r23
     de4:	17 fd       	sbrc	r17, 7
     de6:	41 60       	ori	r20, 0x01	; 1
     de8:	ee 0c       	add	r14, r14
     dea:	ff 1c       	adc	r15, r15
     dec:	00 1f       	adc	r16, r16
     dee:	11 1f       	adc	r17, r17
     df0:	21 50       	subi	r18, 0x01	; 1
     df2:	30 40       	sbci	r19, 0x00	; 0
     df4:	40 30       	cpi	r20, 0x00	; 0
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	59 07       	cpc	r21, r25
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	69 07       	cpc	r22, r25
     dfe:	90 e4       	ldi	r25, 0x40	; 64
     e00:	79 07       	cpc	r23, r25
     e02:	60 f3       	brcs	.-40     	; 0xddc <__mulsf3+0x174>
     e04:	2b 8f       	std	Y+27, r18	; 0x1b
     e06:	3c 8f       	std	Y+28, r19	; 0x1c
     e08:	db 01       	movw	r26, r22
     e0a:	ca 01       	movw	r24, r20
     e0c:	8f 77       	andi	r24, 0x7F	; 127
     e0e:	90 70       	andi	r25, 0x00	; 0
     e10:	a0 70       	andi	r26, 0x00	; 0
     e12:	b0 70       	andi	r27, 0x00	; 0
     e14:	80 34       	cpi	r24, 0x40	; 64
     e16:	91 05       	cpc	r25, r1
     e18:	a1 05       	cpc	r26, r1
     e1a:	b1 05       	cpc	r27, r1
     e1c:	61 f4       	brne	.+24     	; 0xe36 <__mulsf3+0x1ce>
     e1e:	47 fd       	sbrc	r20, 7
     e20:	0a c0       	rjmp	.+20     	; 0xe36 <__mulsf3+0x1ce>
     e22:	e1 14       	cp	r14, r1
     e24:	f1 04       	cpc	r15, r1
     e26:	01 05       	cpc	r16, r1
     e28:	11 05       	cpc	r17, r1
     e2a:	29 f0       	breq	.+10     	; 0xe36 <__mulsf3+0x1ce>
     e2c:	40 5c       	subi	r20, 0xC0	; 192
     e2e:	5f 4f       	sbci	r21, 0xFF	; 255
     e30:	6f 4f       	sbci	r22, 0xFF	; 255
     e32:	7f 4f       	sbci	r23, 0xFF	; 255
     e34:	40 78       	andi	r20, 0x80	; 128
     e36:	1a 8e       	std	Y+26, r1	; 0x1a
     e38:	fe 17       	cp	r31, r30
     e3a:	11 f0       	breq	.+4      	; 0xe40 <__mulsf3+0x1d8>
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	8a 8f       	std	Y+26, r24	; 0x1a
     e40:	4d 8f       	std	Y+29, r20	; 0x1d
     e42:	5e 8f       	std	Y+30, r21	; 0x1e
     e44:	6f 8f       	std	Y+31, r22	; 0x1f
     e46:	78 a3       	std	Y+32, r23	; 0x20
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	89 8f       	std	Y+25, r24	; 0x19
     e4c:	ce 01       	movw	r24, r28
     e4e:	49 96       	adiw	r24, 0x19	; 25
     e50:	0e 94 86 09 	call	0x130c	; 0x130c <__pack_f>
     e54:	a0 96       	adiw	r28, 0x20	; 32
     e56:	e2 e1       	ldi	r30, 0x12	; 18
     e58:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__epilogue_restores__>

00000e5c <__divsf3>:
     e5c:	a8 e1       	ldi	r26, 0x18	; 24
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e4 e3       	ldi	r30, 0x34	; 52
     e62:	f7 e0       	ldi	r31, 0x07	; 7
     e64:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__prologue_saves__+0x10>
     e68:	69 83       	std	Y+1, r22	; 0x01
     e6a:	7a 83       	std	Y+2, r23	; 0x02
     e6c:	8b 83       	std	Y+3, r24	; 0x03
     e6e:	9c 83       	std	Y+4, r25	; 0x04
     e70:	2d 83       	std	Y+5, r18	; 0x05
     e72:	3e 83       	std	Y+6, r19	; 0x06
     e74:	4f 83       	std	Y+7, r20	; 0x07
     e76:	58 87       	std	Y+8, r21	; 0x08
     e78:	b9 e0       	ldi	r27, 0x09	; 9
     e7a:	eb 2e       	mov	r14, r27
     e7c:	f1 2c       	mov	r15, r1
     e7e:	ec 0e       	add	r14, r28
     e80:	fd 1e       	adc	r15, r29
     e82:	ce 01       	movw	r24, r28
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	b7 01       	movw	r22, r14
     e88:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__unpack_f>
     e8c:	8e 01       	movw	r16, r28
     e8e:	0f 5e       	subi	r16, 0xEF	; 239
     e90:	1f 4f       	sbci	r17, 0xFF	; 255
     e92:	ce 01       	movw	r24, r28
     e94:	05 96       	adiw	r24, 0x05	; 5
     e96:	b8 01       	movw	r22, r16
     e98:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__unpack_f>
     e9c:	29 85       	ldd	r18, Y+9	; 0x09
     e9e:	22 30       	cpi	r18, 0x02	; 2
     ea0:	08 f4       	brcc	.+2      	; 0xea4 <__divsf3+0x48>
     ea2:	7e c0       	rjmp	.+252    	; 0xfa0 <__divsf3+0x144>
     ea4:	39 89       	ldd	r19, Y+17	; 0x11
     ea6:	32 30       	cpi	r19, 0x02	; 2
     ea8:	10 f4       	brcc	.+4      	; 0xeae <__divsf3+0x52>
     eaa:	b8 01       	movw	r22, r16
     eac:	7c c0       	rjmp	.+248    	; 0xfa6 <__divsf3+0x14a>
     eae:	8a 85       	ldd	r24, Y+10	; 0x0a
     eb0:	9a 89       	ldd	r25, Y+18	; 0x12
     eb2:	89 27       	eor	r24, r25
     eb4:	8a 87       	std	Y+10, r24	; 0x0a
     eb6:	24 30       	cpi	r18, 0x04	; 4
     eb8:	11 f0       	breq	.+4      	; 0xebe <__divsf3+0x62>
     eba:	22 30       	cpi	r18, 0x02	; 2
     ebc:	31 f4       	brne	.+12     	; 0xeca <__divsf3+0x6e>
     ebe:	23 17       	cp	r18, r19
     ec0:	09 f0       	breq	.+2      	; 0xec4 <__divsf3+0x68>
     ec2:	6e c0       	rjmp	.+220    	; 0xfa0 <__divsf3+0x144>
     ec4:	68 e2       	ldi	r22, 0x28	; 40
     ec6:	71 e0       	ldi	r23, 0x01	; 1
     ec8:	6e c0       	rjmp	.+220    	; 0xfa6 <__divsf3+0x14a>
     eca:	34 30       	cpi	r19, 0x04	; 4
     ecc:	39 f4       	brne	.+14     	; 0xedc <__divsf3+0x80>
     ece:	1d 86       	std	Y+13, r1	; 0x0d
     ed0:	1e 86       	std	Y+14, r1	; 0x0e
     ed2:	1f 86       	std	Y+15, r1	; 0x0f
     ed4:	18 8a       	std	Y+16, r1	; 0x10
     ed6:	1c 86       	std	Y+12, r1	; 0x0c
     ed8:	1b 86       	std	Y+11, r1	; 0x0b
     eda:	04 c0       	rjmp	.+8      	; 0xee4 <__divsf3+0x88>
     edc:	32 30       	cpi	r19, 0x02	; 2
     ede:	21 f4       	brne	.+8      	; 0xee8 <__divsf3+0x8c>
     ee0:	84 e0       	ldi	r24, 0x04	; 4
     ee2:	89 87       	std	Y+9, r24	; 0x09
     ee4:	b7 01       	movw	r22, r14
     ee6:	5f c0       	rjmp	.+190    	; 0xfa6 <__divsf3+0x14a>
     ee8:	2b 85       	ldd	r18, Y+11	; 0x0b
     eea:	3c 85       	ldd	r19, Y+12	; 0x0c
     eec:	8b 89       	ldd	r24, Y+19	; 0x13
     eee:	9c 89       	ldd	r25, Y+20	; 0x14
     ef0:	28 1b       	sub	r18, r24
     ef2:	39 0b       	sbc	r19, r25
     ef4:	3c 87       	std	Y+12, r19	; 0x0c
     ef6:	2b 87       	std	Y+11, r18	; 0x0b
     ef8:	ed 84       	ldd	r14, Y+13	; 0x0d
     efa:	fe 84       	ldd	r15, Y+14	; 0x0e
     efc:	0f 85       	ldd	r16, Y+15	; 0x0f
     efe:	18 89       	ldd	r17, Y+16	; 0x10
     f00:	ad 88       	ldd	r10, Y+21	; 0x15
     f02:	be 88       	ldd	r11, Y+22	; 0x16
     f04:	cf 88       	ldd	r12, Y+23	; 0x17
     f06:	d8 8c       	ldd	r13, Y+24	; 0x18
     f08:	ea 14       	cp	r14, r10
     f0a:	fb 04       	cpc	r15, r11
     f0c:	0c 05       	cpc	r16, r12
     f0e:	1d 05       	cpc	r17, r13
     f10:	40 f4       	brcc	.+16     	; 0xf22 <__divsf3+0xc6>
     f12:	ee 0c       	add	r14, r14
     f14:	ff 1c       	adc	r15, r15
     f16:	00 1f       	adc	r16, r16
     f18:	11 1f       	adc	r17, r17
     f1a:	21 50       	subi	r18, 0x01	; 1
     f1c:	30 40       	sbci	r19, 0x00	; 0
     f1e:	3c 87       	std	Y+12, r19	; 0x0c
     f20:	2b 87       	std	Y+11, r18	; 0x0b
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	a0 e0       	ldi	r26, 0x00	; 0
     f30:	b0 e4       	ldi	r27, 0x40	; 64
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	ea 14       	cp	r14, r10
     f38:	fb 04       	cpc	r15, r11
     f3a:	0c 05       	cpc	r16, r12
     f3c:	1d 05       	cpc	r17, r13
     f3e:	40 f0       	brcs	.+16     	; 0xf50 <__divsf3+0xf4>
     f40:	28 2b       	or	r18, r24
     f42:	39 2b       	or	r19, r25
     f44:	4a 2b       	or	r20, r26
     f46:	5b 2b       	or	r21, r27
     f48:	ea 18       	sub	r14, r10
     f4a:	fb 08       	sbc	r15, r11
     f4c:	0c 09       	sbc	r16, r12
     f4e:	1d 09       	sbc	r17, r13
     f50:	b6 95       	lsr	r27
     f52:	a7 95       	ror	r26
     f54:	97 95       	ror	r25
     f56:	87 95       	ror	r24
     f58:	ee 0c       	add	r14, r14
     f5a:	ff 1c       	adc	r15, r15
     f5c:	00 1f       	adc	r16, r16
     f5e:	11 1f       	adc	r17, r17
     f60:	6f 5f       	subi	r22, 0xFF	; 255
     f62:	7f 4f       	sbci	r23, 0xFF	; 255
     f64:	6f 31       	cpi	r22, 0x1F	; 31
     f66:	71 05       	cpc	r23, r1
     f68:	31 f7       	brne	.-52     	; 0xf36 <__divsf3+0xda>
     f6a:	da 01       	movw	r26, r20
     f6c:	c9 01       	movw	r24, r18
     f6e:	8f 77       	andi	r24, 0x7F	; 127
     f70:	90 70       	andi	r25, 0x00	; 0
     f72:	a0 70       	andi	r26, 0x00	; 0
     f74:	b0 70       	andi	r27, 0x00	; 0
     f76:	80 34       	cpi	r24, 0x40	; 64
     f78:	91 05       	cpc	r25, r1
     f7a:	a1 05       	cpc	r26, r1
     f7c:	b1 05       	cpc	r27, r1
     f7e:	61 f4       	brne	.+24     	; 0xf98 <__divsf3+0x13c>
     f80:	27 fd       	sbrc	r18, 7
     f82:	0a c0       	rjmp	.+20     	; 0xf98 <__divsf3+0x13c>
     f84:	e1 14       	cp	r14, r1
     f86:	f1 04       	cpc	r15, r1
     f88:	01 05       	cpc	r16, r1
     f8a:	11 05       	cpc	r17, r1
     f8c:	29 f0       	breq	.+10     	; 0xf98 <__divsf3+0x13c>
     f8e:	20 5c       	subi	r18, 0xC0	; 192
     f90:	3f 4f       	sbci	r19, 0xFF	; 255
     f92:	4f 4f       	sbci	r20, 0xFF	; 255
     f94:	5f 4f       	sbci	r21, 0xFF	; 255
     f96:	20 78       	andi	r18, 0x80	; 128
     f98:	2d 87       	std	Y+13, r18	; 0x0d
     f9a:	3e 87       	std	Y+14, r19	; 0x0e
     f9c:	4f 87       	std	Y+15, r20	; 0x0f
     f9e:	58 8b       	std	Y+16, r21	; 0x10
     fa0:	be 01       	movw	r22, r28
     fa2:	67 5f       	subi	r22, 0xF7	; 247
     fa4:	7f 4f       	sbci	r23, 0xFF	; 255
     fa6:	cb 01       	movw	r24, r22
     fa8:	0e 94 86 09 	call	0x130c	; 0x130c <__pack_f>
     fac:	68 96       	adiw	r28, 0x18	; 24
     fae:	ea e0       	ldi	r30, 0x0A	; 10
     fb0:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__epilogue_restores__+0x10>

00000fb4 <__gtsf2>:
     fb4:	a8 e1       	ldi	r26, 0x18	; 24
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e0 ee       	ldi	r30, 0xE0	; 224
     fba:	f7 e0       	ldi	r31, 0x07	; 7
     fbc:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__prologue_saves__+0x18>
     fc0:	69 83       	std	Y+1, r22	; 0x01
     fc2:	7a 83       	std	Y+2, r23	; 0x02
     fc4:	8b 83       	std	Y+3, r24	; 0x03
     fc6:	9c 83       	std	Y+4, r25	; 0x04
     fc8:	2d 83       	std	Y+5, r18	; 0x05
     fca:	3e 83       	std	Y+6, r19	; 0x06
     fcc:	4f 83       	std	Y+7, r20	; 0x07
     fce:	58 87       	std	Y+8, r21	; 0x08
     fd0:	89 e0       	ldi	r24, 0x09	; 9
     fd2:	e8 2e       	mov	r14, r24
     fd4:	f1 2c       	mov	r15, r1
     fd6:	ec 0e       	add	r14, r28
     fd8:	fd 1e       	adc	r15, r29
     fda:	ce 01       	movw	r24, r28
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	b7 01       	movw	r22, r14
     fe0:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__unpack_f>
     fe4:	8e 01       	movw	r16, r28
     fe6:	0f 5e       	subi	r16, 0xEF	; 239
     fe8:	1f 4f       	sbci	r17, 0xFF	; 255
     fea:	ce 01       	movw	r24, r28
     fec:	05 96       	adiw	r24, 0x05	; 5
     fee:	b8 01       	movw	r22, r16
     ff0:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__unpack_f>
     ff4:	89 85       	ldd	r24, Y+9	; 0x09
     ff6:	82 30       	cpi	r24, 0x02	; 2
     ff8:	40 f0       	brcs	.+16     	; 0x100a <__gtsf2+0x56>
     ffa:	89 89       	ldd	r24, Y+17	; 0x11
     ffc:	82 30       	cpi	r24, 0x02	; 2
     ffe:	28 f0       	brcs	.+10     	; 0x100a <__gtsf2+0x56>
    1000:	c7 01       	movw	r24, r14
    1002:	b8 01       	movw	r22, r16
    1004:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__fpcmp_parts_f>
    1008:	01 c0       	rjmp	.+2      	; 0x100c <__gtsf2+0x58>
    100a:	8f ef       	ldi	r24, 0xFF	; 255
    100c:	68 96       	adiw	r28, 0x18	; 24
    100e:	e6 e0       	ldi	r30, 0x06	; 6
    1010:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__epilogue_restores__+0x18>

00001014 <__gesf2>:
    1014:	a8 e1       	ldi	r26, 0x18	; 24
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e0 e1       	ldi	r30, 0x10	; 16
    101a:	f8 e0       	ldi	r31, 0x08	; 8
    101c:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__prologue_saves__+0x18>
    1020:	69 83       	std	Y+1, r22	; 0x01
    1022:	7a 83       	std	Y+2, r23	; 0x02
    1024:	8b 83       	std	Y+3, r24	; 0x03
    1026:	9c 83       	std	Y+4, r25	; 0x04
    1028:	2d 83       	std	Y+5, r18	; 0x05
    102a:	3e 83       	std	Y+6, r19	; 0x06
    102c:	4f 83       	std	Y+7, r20	; 0x07
    102e:	58 87       	std	Y+8, r21	; 0x08
    1030:	89 e0       	ldi	r24, 0x09	; 9
    1032:	e8 2e       	mov	r14, r24
    1034:	f1 2c       	mov	r15, r1
    1036:	ec 0e       	add	r14, r28
    1038:	fd 1e       	adc	r15, r29
    103a:	ce 01       	movw	r24, r28
    103c:	01 96       	adiw	r24, 0x01	; 1
    103e:	b7 01       	movw	r22, r14
    1040:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__unpack_f>
    1044:	8e 01       	movw	r16, r28
    1046:	0f 5e       	subi	r16, 0xEF	; 239
    1048:	1f 4f       	sbci	r17, 0xFF	; 255
    104a:	ce 01       	movw	r24, r28
    104c:	05 96       	adiw	r24, 0x05	; 5
    104e:	b8 01       	movw	r22, r16
    1050:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__unpack_f>
    1054:	89 85       	ldd	r24, Y+9	; 0x09
    1056:	82 30       	cpi	r24, 0x02	; 2
    1058:	40 f0       	brcs	.+16     	; 0x106a <__gesf2+0x56>
    105a:	89 89       	ldd	r24, Y+17	; 0x11
    105c:	82 30       	cpi	r24, 0x02	; 2
    105e:	28 f0       	brcs	.+10     	; 0x106a <__gesf2+0x56>
    1060:	c7 01       	movw	r24, r14
    1062:	b8 01       	movw	r22, r16
    1064:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__fpcmp_parts_f>
    1068:	01 c0       	rjmp	.+2      	; 0x106c <__gesf2+0x58>
    106a:	8f ef       	ldi	r24, 0xFF	; 255
    106c:	68 96       	adiw	r28, 0x18	; 24
    106e:	e6 e0       	ldi	r30, 0x06	; 6
    1070:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__epilogue_restores__+0x18>

00001074 <__ltsf2>:
    1074:	a8 e1       	ldi	r26, 0x18	; 24
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e0 e4       	ldi	r30, 0x40	; 64
    107a:	f8 e0       	ldi	r31, 0x08	; 8
    107c:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__prologue_saves__+0x18>
    1080:	69 83       	std	Y+1, r22	; 0x01
    1082:	7a 83       	std	Y+2, r23	; 0x02
    1084:	8b 83       	std	Y+3, r24	; 0x03
    1086:	9c 83       	std	Y+4, r25	; 0x04
    1088:	2d 83       	std	Y+5, r18	; 0x05
    108a:	3e 83       	std	Y+6, r19	; 0x06
    108c:	4f 83       	std	Y+7, r20	; 0x07
    108e:	58 87       	std	Y+8, r21	; 0x08
    1090:	89 e0       	ldi	r24, 0x09	; 9
    1092:	e8 2e       	mov	r14, r24
    1094:	f1 2c       	mov	r15, r1
    1096:	ec 0e       	add	r14, r28
    1098:	fd 1e       	adc	r15, r29
    109a:	ce 01       	movw	r24, r28
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	b7 01       	movw	r22, r14
    10a0:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__unpack_f>
    10a4:	8e 01       	movw	r16, r28
    10a6:	0f 5e       	subi	r16, 0xEF	; 239
    10a8:	1f 4f       	sbci	r17, 0xFF	; 255
    10aa:	ce 01       	movw	r24, r28
    10ac:	05 96       	adiw	r24, 0x05	; 5
    10ae:	b8 01       	movw	r22, r16
    10b0:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__unpack_f>
    10b4:	89 85       	ldd	r24, Y+9	; 0x09
    10b6:	82 30       	cpi	r24, 0x02	; 2
    10b8:	40 f0       	brcs	.+16     	; 0x10ca <__ltsf2+0x56>
    10ba:	89 89       	ldd	r24, Y+17	; 0x11
    10bc:	82 30       	cpi	r24, 0x02	; 2
    10be:	28 f0       	brcs	.+10     	; 0x10ca <__ltsf2+0x56>
    10c0:	c7 01       	movw	r24, r14
    10c2:	b8 01       	movw	r22, r16
    10c4:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__fpcmp_parts_f>
    10c8:	01 c0       	rjmp	.+2      	; 0x10cc <__ltsf2+0x58>
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	68 96       	adiw	r28, 0x18	; 24
    10ce:	e6 e0       	ldi	r30, 0x06	; 6
    10d0:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__epilogue_restores__+0x18>

000010d4 <__fixsfsi>:
    10d4:	ac e0       	ldi	r26, 0x0C	; 12
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e0 e7       	ldi	r30, 0x70	; 112
    10da:	f8 e0       	ldi	r31, 0x08	; 8
    10dc:	0c 94 63 0b 	jmp	0x16c6	; 0x16c6 <__prologue_saves__+0x20>
    10e0:	69 83       	std	Y+1, r22	; 0x01
    10e2:	7a 83       	std	Y+2, r23	; 0x02
    10e4:	8b 83       	std	Y+3, r24	; 0x03
    10e6:	9c 83       	std	Y+4, r25	; 0x04
    10e8:	ce 01       	movw	r24, r28
    10ea:	01 96       	adiw	r24, 0x01	; 1
    10ec:	be 01       	movw	r22, r28
    10ee:	6b 5f       	subi	r22, 0xFB	; 251
    10f0:	7f 4f       	sbci	r23, 0xFF	; 255
    10f2:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__unpack_f>
    10f6:	8d 81       	ldd	r24, Y+5	; 0x05
    10f8:	82 30       	cpi	r24, 0x02	; 2
    10fa:	61 f1       	breq	.+88     	; 0x1154 <__fixsfsi+0x80>
    10fc:	82 30       	cpi	r24, 0x02	; 2
    10fe:	50 f1       	brcs	.+84     	; 0x1154 <__fixsfsi+0x80>
    1100:	84 30       	cpi	r24, 0x04	; 4
    1102:	21 f4       	brne	.+8      	; 0x110c <__fixsfsi+0x38>
    1104:	8e 81       	ldd	r24, Y+6	; 0x06
    1106:	88 23       	and	r24, r24
    1108:	51 f1       	breq	.+84     	; 0x115e <__fixsfsi+0x8a>
    110a:	2e c0       	rjmp	.+92     	; 0x1168 <__fixsfsi+0x94>
    110c:	2f 81       	ldd	r18, Y+7	; 0x07
    110e:	38 85       	ldd	r19, Y+8	; 0x08
    1110:	37 fd       	sbrc	r19, 7
    1112:	20 c0       	rjmp	.+64     	; 0x1154 <__fixsfsi+0x80>
    1114:	6e 81       	ldd	r22, Y+6	; 0x06
    1116:	2f 31       	cpi	r18, 0x1F	; 31
    1118:	31 05       	cpc	r19, r1
    111a:	1c f0       	brlt	.+6      	; 0x1122 <__fixsfsi+0x4e>
    111c:	66 23       	and	r22, r22
    111e:	f9 f0       	breq	.+62     	; 0x115e <__fixsfsi+0x8a>
    1120:	23 c0       	rjmp	.+70     	; 0x1168 <__fixsfsi+0x94>
    1122:	8e e1       	ldi	r24, 0x1E	; 30
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	82 1b       	sub	r24, r18
    1128:	93 0b       	sbc	r25, r19
    112a:	29 85       	ldd	r18, Y+9	; 0x09
    112c:	3a 85       	ldd	r19, Y+10	; 0x0a
    112e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1130:	5c 85       	ldd	r21, Y+12	; 0x0c
    1132:	04 c0       	rjmp	.+8      	; 0x113c <__fixsfsi+0x68>
    1134:	56 95       	lsr	r21
    1136:	47 95       	ror	r20
    1138:	37 95       	ror	r19
    113a:	27 95       	ror	r18
    113c:	8a 95       	dec	r24
    113e:	d2 f7       	brpl	.-12     	; 0x1134 <__fixsfsi+0x60>
    1140:	66 23       	and	r22, r22
    1142:	b1 f0       	breq	.+44     	; 0x1170 <__fixsfsi+0x9c>
    1144:	50 95       	com	r21
    1146:	40 95       	com	r20
    1148:	30 95       	com	r19
    114a:	21 95       	neg	r18
    114c:	3f 4f       	sbci	r19, 0xFF	; 255
    114e:	4f 4f       	sbci	r20, 0xFF	; 255
    1150:	5f 4f       	sbci	r21, 0xFF	; 255
    1152:	0e c0       	rjmp	.+28     	; 0x1170 <__fixsfsi+0x9c>
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e0       	ldi	r20, 0x00	; 0
    115a:	50 e0       	ldi	r21, 0x00	; 0
    115c:	09 c0       	rjmp	.+18     	; 0x1170 <__fixsfsi+0x9c>
    115e:	2f ef       	ldi	r18, 0xFF	; 255
    1160:	3f ef       	ldi	r19, 0xFF	; 255
    1162:	4f ef       	ldi	r20, 0xFF	; 255
    1164:	5f e7       	ldi	r21, 0x7F	; 127
    1166:	04 c0       	rjmp	.+8      	; 0x1170 <__fixsfsi+0x9c>
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	40 e0       	ldi	r20, 0x00	; 0
    116e:	50 e8       	ldi	r21, 0x80	; 128
    1170:	b9 01       	movw	r22, r18
    1172:	ca 01       	movw	r24, r20
    1174:	2c 96       	adiw	r28, 0x0c	; 12
    1176:	e2 e0       	ldi	r30, 0x02	; 2
    1178:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__epilogue_restores__+0x20>

0000117c <__floatunsisf>:
    117c:	a8 e0       	ldi	r26, 0x08	; 8
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e4 ec       	ldi	r30, 0xC4	; 196
    1182:	f8 e0       	ldi	r31, 0x08	; 8
    1184:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__prologue_saves__+0x10>
    1188:	7b 01       	movw	r14, r22
    118a:	8c 01       	movw	r16, r24
    118c:	61 15       	cp	r22, r1
    118e:	71 05       	cpc	r23, r1
    1190:	81 05       	cpc	r24, r1
    1192:	91 05       	cpc	r25, r1
    1194:	19 f4       	brne	.+6      	; 0x119c <__floatunsisf+0x20>
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	89 83       	std	Y+1, r24	; 0x01
    119a:	60 c0       	rjmp	.+192    	; 0x125c <__floatunsisf+0xe0>
    119c:	83 e0       	ldi	r24, 0x03	; 3
    119e:	89 83       	std	Y+1, r24	; 0x01
    11a0:	8e e1       	ldi	r24, 0x1E	; 30
    11a2:	c8 2e       	mov	r12, r24
    11a4:	d1 2c       	mov	r13, r1
    11a6:	dc 82       	std	Y+4, r13	; 0x04
    11a8:	cb 82       	std	Y+3, r12	; 0x03
    11aa:	ed 82       	std	Y+5, r14	; 0x05
    11ac:	fe 82       	std	Y+6, r15	; 0x06
    11ae:	0f 83       	std	Y+7, r16	; 0x07
    11b0:	18 87       	std	Y+8, r17	; 0x08
    11b2:	c8 01       	movw	r24, r16
    11b4:	b7 01       	movw	r22, r14
    11b6:	0e 94 37 09 	call	0x126e	; 0x126e <__clzsi2>
    11ba:	fc 01       	movw	r30, r24
    11bc:	31 97       	sbiw	r30, 0x01	; 1
    11be:	f7 ff       	sbrs	r31, 7
    11c0:	3b c0       	rjmp	.+118    	; 0x1238 <__floatunsisf+0xbc>
    11c2:	22 27       	eor	r18, r18
    11c4:	33 27       	eor	r19, r19
    11c6:	2e 1b       	sub	r18, r30
    11c8:	3f 0b       	sbc	r19, r31
    11ca:	57 01       	movw	r10, r14
    11cc:	68 01       	movw	r12, r16
    11ce:	02 2e       	mov	r0, r18
    11d0:	04 c0       	rjmp	.+8      	; 0x11da <__floatunsisf+0x5e>
    11d2:	d6 94       	lsr	r13
    11d4:	c7 94       	ror	r12
    11d6:	b7 94       	ror	r11
    11d8:	a7 94       	ror	r10
    11da:	0a 94       	dec	r0
    11dc:	d2 f7       	brpl	.-12     	; 0x11d2 <__floatunsisf+0x56>
    11de:	40 e0       	ldi	r20, 0x00	; 0
    11e0:	50 e0       	ldi	r21, 0x00	; 0
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	a0 e0       	ldi	r26, 0x00	; 0
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	04 c0       	rjmp	.+8      	; 0x11f8 <__floatunsisf+0x7c>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	aa 1f       	adc	r26, r26
    11f6:	bb 1f       	adc	r27, r27
    11f8:	2a 95       	dec	r18
    11fa:	d2 f7       	brpl	.-12     	; 0x11f0 <__floatunsisf+0x74>
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	a1 09       	sbc	r26, r1
    1200:	b1 09       	sbc	r27, r1
    1202:	8e 21       	and	r24, r14
    1204:	9f 21       	and	r25, r15
    1206:	a0 23       	and	r26, r16
    1208:	b1 23       	and	r27, r17
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	a1 05       	cpc	r26, r1
    120e:	b1 05       	cpc	r27, r1
    1210:	21 f0       	breq	.+8      	; 0x121a <__floatunsisf+0x9e>
    1212:	41 e0       	ldi	r20, 0x01	; 1
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	4a 29       	or	r20, r10
    121c:	5b 29       	or	r21, r11
    121e:	6c 29       	or	r22, r12
    1220:	7d 29       	or	r23, r13
    1222:	4d 83       	std	Y+5, r20	; 0x05
    1224:	5e 83       	std	Y+6, r21	; 0x06
    1226:	6f 83       	std	Y+7, r22	; 0x07
    1228:	78 87       	std	Y+8, r23	; 0x08
    122a:	8e e1       	ldi	r24, 0x1E	; 30
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	8e 1b       	sub	r24, r30
    1230:	9f 0b       	sbc	r25, r31
    1232:	9c 83       	std	Y+4, r25	; 0x04
    1234:	8b 83       	std	Y+3, r24	; 0x03
    1236:	12 c0       	rjmp	.+36     	; 0x125c <__floatunsisf+0xe0>
    1238:	30 97       	sbiw	r30, 0x00	; 0
    123a:	81 f0       	breq	.+32     	; 0x125c <__floatunsisf+0xe0>
    123c:	0e 2e       	mov	r0, r30
    123e:	04 c0       	rjmp	.+8      	; 0x1248 <__floatunsisf+0xcc>
    1240:	ee 0c       	add	r14, r14
    1242:	ff 1c       	adc	r15, r15
    1244:	00 1f       	adc	r16, r16
    1246:	11 1f       	adc	r17, r17
    1248:	0a 94       	dec	r0
    124a:	d2 f7       	brpl	.-12     	; 0x1240 <__floatunsisf+0xc4>
    124c:	ed 82       	std	Y+5, r14	; 0x05
    124e:	fe 82       	std	Y+6, r15	; 0x06
    1250:	0f 83       	std	Y+7, r16	; 0x07
    1252:	18 87       	std	Y+8, r17	; 0x08
    1254:	ce 1a       	sub	r12, r30
    1256:	df 0a       	sbc	r13, r31
    1258:	dc 82       	std	Y+4, r13	; 0x04
    125a:	cb 82       	std	Y+3, r12	; 0x03
    125c:	1a 82       	std	Y+2, r1	; 0x02
    125e:	ce 01       	movw	r24, r28
    1260:	01 96       	adiw	r24, 0x01	; 1
    1262:	0e 94 86 09 	call	0x130c	; 0x130c <__pack_f>
    1266:	28 96       	adiw	r28, 0x08	; 8
    1268:	ea e0       	ldi	r30, 0x0A	; 10
    126a:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__epilogue_restores__+0x10>

0000126e <__clzsi2>:
    126e:	ef 92       	push	r14
    1270:	ff 92       	push	r15
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
    1276:	7b 01       	movw	r14, r22
    1278:	8c 01       	movw	r16, r24
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	e8 16       	cp	r14, r24
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	f8 06       	cpc	r15, r24
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	08 07       	cpc	r16, r24
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	18 07       	cpc	r17, r24
    128a:	88 f4       	brcc	.+34     	; 0x12ae <__clzsi2+0x40>
    128c:	8f ef       	ldi	r24, 0xFF	; 255
    128e:	e8 16       	cp	r14, r24
    1290:	f1 04       	cpc	r15, r1
    1292:	01 05       	cpc	r16, r1
    1294:	11 05       	cpc	r17, r1
    1296:	31 f0       	breq	.+12     	; 0x12a4 <__clzsi2+0x36>
    1298:	28 f0       	brcs	.+10     	; 0x12a4 <__clzsi2+0x36>
    129a:	88 e0       	ldi	r24, 0x08	; 8
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	a0 e0       	ldi	r26, 0x00	; 0
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	17 c0       	rjmp	.+46     	; 0x12d2 <__clzsi2+0x64>
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	a0 e0       	ldi	r26, 0x00	; 0
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	12 c0       	rjmp	.+36     	; 0x12d2 <__clzsi2+0x64>
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	e8 16       	cp	r14, r24
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	f8 06       	cpc	r15, r24
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	08 07       	cpc	r16, r24
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	18 07       	cpc	r17, r24
    12be:	28 f0       	brcs	.+10     	; 0x12ca <__clzsi2+0x5c>
    12c0:	88 e1       	ldi	r24, 0x18	; 24
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	a0 e0       	ldi	r26, 0x00	; 0
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	04 c0       	rjmp	.+8      	; 0x12d2 <__clzsi2+0x64>
    12ca:	80 e1       	ldi	r24, 0x10	; 16
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	a0 e0       	ldi	r26, 0x00	; 0
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	20 e2       	ldi	r18, 0x20	; 32
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	40 e0       	ldi	r20, 0x00	; 0
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	28 1b       	sub	r18, r24
    12dc:	39 0b       	sbc	r19, r25
    12de:	4a 0b       	sbc	r20, r26
    12e0:	5b 0b       	sbc	r21, r27
    12e2:	04 c0       	rjmp	.+8      	; 0x12ec <__clzsi2+0x7e>
    12e4:	16 95       	lsr	r17
    12e6:	07 95       	ror	r16
    12e8:	f7 94       	ror	r15
    12ea:	e7 94       	ror	r14
    12ec:	8a 95       	dec	r24
    12ee:	d2 f7       	brpl	.-12     	; 0x12e4 <__clzsi2+0x76>
    12f0:	f7 01       	movw	r30, r14
    12f2:	e0 5d       	subi	r30, 0xD0	; 208
    12f4:	fe 4f       	sbci	r31, 0xFE	; 254
    12f6:	80 81       	ld	r24, Z
    12f8:	28 1b       	sub	r18, r24
    12fa:	31 09       	sbc	r19, r1
    12fc:	41 09       	sbc	r20, r1
    12fe:	51 09       	sbc	r21, r1
    1300:	c9 01       	movw	r24, r18
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
    1306:	ff 90       	pop	r15
    1308:	ef 90       	pop	r14
    130a:	08 95       	ret

0000130c <__pack_f>:
    130c:	df 92       	push	r13
    130e:	ef 92       	push	r14
    1310:	ff 92       	push	r15
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	fc 01       	movw	r30, r24
    1318:	e4 80       	ldd	r14, Z+4	; 0x04
    131a:	f5 80       	ldd	r15, Z+5	; 0x05
    131c:	06 81       	ldd	r16, Z+6	; 0x06
    131e:	17 81       	ldd	r17, Z+7	; 0x07
    1320:	d1 80       	ldd	r13, Z+1	; 0x01
    1322:	80 81       	ld	r24, Z
    1324:	82 30       	cpi	r24, 0x02	; 2
    1326:	48 f4       	brcc	.+18     	; 0x133a <__pack_f+0x2e>
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	a0 e1       	ldi	r26, 0x10	; 16
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e8 2a       	or	r14, r24
    1332:	f9 2a       	or	r15, r25
    1334:	0a 2b       	or	r16, r26
    1336:	1b 2b       	or	r17, r27
    1338:	a5 c0       	rjmp	.+330    	; 0x1484 <__pack_f+0x178>
    133a:	84 30       	cpi	r24, 0x04	; 4
    133c:	09 f4       	brne	.+2      	; 0x1340 <__pack_f+0x34>
    133e:	9f c0       	rjmp	.+318    	; 0x147e <__pack_f+0x172>
    1340:	82 30       	cpi	r24, 0x02	; 2
    1342:	21 f4       	brne	.+8      	; 0x134c <__pack_f+0x40>
    1344:	ee 24       	eor	r14, r14
    1346:	ff 24       	eor	r15, r15
    1348:	87 01       	movw	r16, r14
    134a:	05 c0       	rjmp	.+10     	; 0x1356 <__pack_f+0x4a>
    134c:	e1 14       	cp	r14, r1
    134e:	f1 04       	cpc	r15, r1
    1350:	01 05       	cpc	r16, r1
    1352:	11 05       	cpc	r17, r1
    1354:	19 f4       	brne	.+6      	; 0x135c <__pack_f+0x50>
    1356:	e0 e0       	ldi	r30, 0x00	; 0
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	96 c0       	rjmp	.+300    	; 0x1488 <__pack_f+0x17c>
    135c:	62 81       	ldd	r22, Z+2	; 0x02
    135e:	73 81       	ldd	r23, Z+3	; 0x03
    1360:	9f ef       	ldi	r25, 0xFF	; 255
    1362:	62 38       	cpi	r22, 0x82	; 130
    1364:	79 07       	cpc	r23, r25
    1366:	0c f0       	brlt	.+2      	; 0x136a <__pack_f+0x5e>
    1368:	5b c0       	rjmp	.+182    	; 0x1420 <__pack_f+0x114>
    136a:	22 e8       	ldi	r18, 0x82	; 130
    136c:	3f ef       	ldi	r19, 0xFF	; 255
    136e:	26 1b       	sub	r18, r22
    1370:	37 0b       	sbc	r19, r23
    1372:	2a 31       	cpi	r18, 0x1A	; 26
    1374:	31 05       	cpc	r19, r1
    1376:	2c f0       	brlt	.+10     	; 0x1382 <__pack_f+0x76>
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	50 e0       	ldi	r21, 0x00	; 0
    1380:	2a c0       	rjmp	.+84     	; 0x13d6 <__pack_f+0xca>
    1382:	b8 01       	movw	r22, r16
    1384:	a7 01       	movw	r20, r14
    1386:	02 2e       	mov	r0, r18
    1388:	04 c0       	rjmp	.+8      	; 0x1392 <__pack_f+0x86>
    138a:	76 95       	lsr	r23
    138c:	67 95       	ror	r22
    138e:	57 95       	ror	r21
    1390:	47 95       	ror	r20
    1392:	0a 94       	dec	r0
    1394:	d2 f7       	brpl	.-12     	; 0x138a <__pack_f+0x7e>
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a0 e0       	ldi	r26, 0x00	; 0
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	04 c0       	rjmp	.+8      	; 0x13a8 <__pack_f+0x9c>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	aa 1f       	adc	r26, r26
    13a6:	bb 1f       	adc	r27, r27
    13a8:	2a 95       	dec	r18
    13aa:	d2 f7       	brpl	.-12     	; 0x13a0 <__pack_f+0x94>
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	a1 09       	sbc	r26, r1
    13b0:	b1 09       	sbc	r27, r1
    13b2:	8e 21       	and	r24, r14
    13b4:	9f 21       	and	r25, r15
    13b6:	a0 23       	and	r26, r16
    13b8:	b1 23       	and	r27, r17
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	a1 05       	cpc	r26, r1
    13be:	b1 05       	cpc	r27, r1
    13c0:	21 f0       	breq	.+8      	; 0x13ca <__pack_f+0xbe>
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	a0 e0       	ldi	r26, 0x00	; 0
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	9a 01       	movw	r18, r20
    13cc:	ab 01       	movw	r20, r22
    13ce:	28 2b       	or	r18, r24
    13d0:	39 2b       	or	r19, r25
    13d2:	4a 2b       	or	r20, r26
    13d4:	5b 2b       	or	r21, r27
    13d6:	da 01       	movw	r26, r20
    13d8:	c9 01       	movw	r24, r18
    13da:	8f 77       	andi	r24, 0x7F	; 127
    13dc:	90 70       	andi	r25, 0x00	; 0
    13de:	a0 70       	andi	r26, 0x00	; 0
    13e0:	b0 70       	andi	r27, 0x00	; 0
    13e2:	80 34       	cpi	r24, 0x40	; 64
    13e4:	91 05       	cpc	r25, r1
    13e6:	a1 05       	cpc	r26, r1
    13e8:	b1 05       	cpc	r27, r1
    13ea:	39 f4       	brne	.+14     	; 0x13fa <__pack_f+0xee>
    13ec:	27 ff       	sbrs	r18, 7
    13ee:	09 c0       	rjmp	.+18     	; 0x1402 <__pack_f+0xf6>
    13f0:	20 5c       	subi	r18, 0xC0	; 192
    13f2:	3f 4f       	sbci	r19, 0xFF	; 255
    13f4:	4f 4f       	sbci	r20, 0xFF	; 255
    13f6:	5f 4f       	sbci	r21, 0xFF	; 255
    13f8:	04 c0       	rjmp	.+8      	; 0x1402 <__pack_f+0xf6>
    13fa:	21 5c       	subi	r18, 0xC1	; 193
    13fc:	3f 4f       	sbci	r19, 0xFF	; 255
    13fe:	4f 4f       	sbci	r20, 0xFF	; 255
    1400:	5f 4f       	sbci	r21, 0xFF	; 255
    1402:	e0 e0       	ldi	r30, 0x00	; 0
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	20 30       	cpi	r18, 0x00	; 0
    1408:	a0 e0       	ldi	r26, 0x00	; 0
    140a:	3a 07       	cpc	r19, r26
    140c:	a0 e0       	ldi	r26, 0x00	; 0
    140e:	4a 07       	cpc	r20, r26
    1410:	a0 e4       	ldi	r26, 0x40	; 64
    1412:	5a 07       	cpc	r21, r26
    1414:	10 f0       	brcs	.+4      	; 0x141a <__pack_f+0x10e>
    1416:	e1 e0       	ldi	r30, 0x01	; 1
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	79 01       	movw	r14, r18
    141c:	8a 01       	movw	r16, r20
    141e:	27 c0       	rjmp	.+78     	; 0x146e <__pack_f+0x162>
    1420:	60 38       	cpi	r22, 0x80	; 128
    1422:	71 05       	cpc	r23, r1
    1424:	64 f5       	brge	.+88     	; 0x147e <__pack_f+0x172>
    1426:	fb 01       	movw	r30, r22
    1428:	e1 58       	subi	r30, 0x81	; 129
    142a:	ff 4f       	sbci	r31, 0xFF	; 255
    142c:	d8 01       	movw	r26, r16
    142e:	c7 01       	movw	r24, r14
    1430:	8f 77       	andi	r24, 0x7F	; 127
    1432:	90 70       	andi	r25, 0x00	; 0
    1434:	a0 70       	andi	r26, 0x00	; 0
    1436:	b0 70       	andi	r27, 0x00	; 0
    1438:	80 34       	cpi	r24, 0x40	; 64
    143a:	91 05       	cpc	r25, r1
    143c:	a1 05       	cpc	r26, r1
    143e:	b1 05       	cpc	r27, r1
    1440:	39 f4       	brne	.+14     	; 0x1450 <__pack_f+0x144>
    1442:	e7 fe       	sbrs	r14, 7
    1444:	0d c0       	rjmp	.+26     	; 0x1460 <__pack_f+0x154>
    1446:	80 e4       	ldi	r24, 0x40	; 64
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	a0 e0       	ldi	r26, 0x00	; 0
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	04 c0       	rjmp	.+8      	; 0x1458 <__pack_f+0x14c>
    1450:	8f e3       	ldi	r24, 0x3F	; 63
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a0 e0       	ldi	r26, 0x00	; 0
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e8 0e       	add	r14, r24
    145a:	f9 1e       	adc	r15, r25
    145c:	0a 1f       	adc	r16, r26
    145e:	1b 1f       	adc	r17, r27
    1460:	17 ff       	sbrs	r17, 7
    1462:	05 c0       	rjmp	.+10     	; 0x146e <__pack_f+0x162>
    1464:	16 95       	lsr	r17
    1466:	07 95       	ror	r16
    1468:	f7 94       	ror	r15
    146a:	e7 94       	ror	r14
    146c:	31 96       	adiw	r30, 0x01	; 1
    146e:	87 e0       	ldi	r24, 0x07	; 7
    1470:	16 95       	lsr	r17
    1472:	07 95       	ror	r16
    1474:	f7 94       	ror	r15
    1476:	e7 94       	ror	r14
    1478:	8a 95       	dec	r24
    147a:	d1 f7       	brne	.-12     	; 0x1470 <__pack_f+0x164>
    147c:	05 c0       	rjmp	.+10     	; 0x1488 <__pack_f+0x17c>
    147e:	ee 24       	eor	r14, r14
    1480:	ff 24       	eor	r15, r15
    1482:	87 01       	movw	r16, r14
    1484:	ef ef       	ldi	r30, 0xFF	; 255
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	6e 2f       	mov	r22, r30
    148a:	67 95       	ror	r22
    148c:	66 27       	eor	r22, r22
    148e:	67 95       	ror	r22
    1490:	90 2f       	mov	r25, r16
    1492:	9f 77       	andi	r25, 0x7F	; 127
    1494:	d7 94       	ror	r13
    1496:	dd 24       	eor	r13, r13
    1498:	d7 94       	ror	r13
    149a:	8e 2f       	mov	r24, r30
    149c:	86 95       	lsr	r24
    149e:	49 2f       	mov	r20, r25
    14a0:	46 2b       	or	r20, r22
    14a2:	58 2f       	mov	r21, r24
    14a4:	5d 29       	or	r21, r13
    14a6:	b7 01       	movw	r22, r14
    14a8:	ca 01       	movw	r24, r20
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	ff 90       	pop	r15
    14b0:	ef 90       	pop	r14
    14b2:	df 90       	pop	r13
    14b4:	08 95       	ret

000014b6 <__unpack_f>:
    14b6:	fc 01       	movw	r30, r24
    14b8:	db 01       	movw	r26, r22
    14ba:	40 81       	ld	r20, Z
    14bc:	51 81       	ldd	r21, Z+1	; 0x01
    14be:	22 81       	ldd	r18, Z+2	; 0x02
    14c0:	62 2f       	mov	r22, r18
    14c2:	6f 77       	andi	r22, 0x7F	; 127
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	22 1f       	adc	r18, r18
    14c8:	22 27       	eor	r18, r18
    14ca:	22 1f       	adc	r18, r18
    14cc:	93 81       	ldd	r25, Z+3	; 0x03
    14ce:	89 2f       	mov	r24, r25
    14d0:	88 0f       	add	r24, r24
    14d2:	82 2b       	or	r24, r18
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	99 1f       	adc	r25, r25
    14da:	99 27       	eor	r25, r25
    14dc:	99 1f       	adc	r25, r25
    14de:	11 96       	adiw	r26, 0x01	; 1
    14e0:	9c 93       	st	X, r25
    14e2:	11 97       	sbiw	r26, 0x01	; 1
    14e4:	21 15       	cp	r18, r1
    14e6:	31 05       	cpc	r19, r1
    14e8:	a9 f5       	brne	.+106    	; 0x1554 <__unpack_f+0x9e>
    14ea:	41 15       	cp	r20, r1
    14ec:	51 05       	cpc	r21, r1
    14ee:	61 05       	cpc	r22, r1
    14f0:	71 05       	cpc	r23, r1
    14f2:	11 f4       	brne	.+4      	; 0x14f8 <__unpack_f+0x42>
    14f4:	82 e0       	ldi	r24, 0x02	; 2
    14f6:	37 c0       	rjmp	.+110    	; 0x1566 <__unpack_f+0xb0>
    14f8:	82 e8       	ldi	r24, 0x82	; 130
    14fa:	9f ef       	ldi	r25, 0xFF	; 255
    14fc:	13 96       	adiw	r26, 0x03	; 3
    14fe:	9c 93       	st	X, r25
    1500:	8e 93       	st	-X, r24
    1502:	12 97       	sbiw	r26, 0x02	; 2
    1504:	9a 01       	movw	r18, r20
    1506:	ab 01       	movw	r20, r22
    1508:	67 e0       	ldi	r22, 0x07	; 7
    150a:	22 0f       	add	r18, r18
    150c:	33 1f       	adc	r19, r19
    150e:	44 1f       	adc	r20, r20
    1510:	55 1f       	adc	r21, r21
    1512:	6a 95       	dec	r22
    1514:	d1 f7       	brne	.-12     	; 0x150a <__unpack_f+0x54>
    1516:	83 e0       	ldi	r24, 0x03	; 3
    1518:	8c 93       	st	X, r24
    151a:	0d c0       	rjmp	.+26     	; 0x1536 <__unpack_f+0x80>
    151c:	22 0f       	add	r18, r18
    151e:	33 1f       	adc	r19, r19
    1520:	44 1f       	adc	r20, r20
    1522:	55 1f       	adc	r21, r21
    1524:	12 96       	adiw	r26, 0x02	; 2
    1526:	8d 91       	ld	r24, X+
    1528:	9c 91       	ld	r25, X
    152a:	13 97       	sbiw	r26, 0x03	; 3
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	13 96       	adiw	r26, 0x03	; 3
    1530:	9c 93       	st	X, r25
    1532:	8e 93       	st	-X, r24
    1534:	12 97       	sbiw	r26, 0x02	; 2
    1536:	20 30       	cpi	r18, 0x00	; 0
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	38 07       	cpc	r19, r24
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	48 07       	cpc	r20, r24
    1540:	80 e4       	ldi	r24, 0x40	; 64
    1542:	58 07       	cpc	r21, r24
    1544:	58 f3       	brcs	.-42     	; 0x151c <__unpack_f+0x66>
    1546:	14 96       	adiw	r26, 0x04	; 4
    1548:	2d 93       	st	X+, r18
    154a:	3d 93       	st	X+, r19
    154c:	4d 93       	st	X+, r20
    154e:	5c 93       	st	X, r21
    1550:	17 97       	sbiw	r26, 0x07	; 7
    1552:	08 95       	ret
    1554:	2f 3f       	cpi	r18, 0xFF	; 255
    1556:	31 05       	cpc	r19, r1
    1558:	79 f4       	brne	.+30     	; 0x1578 <__unpack_f+0xc2>
    155a:	41 15       	cp	r20, r1
    155c:	51 05       	cpc	r21, r1
    155e:	61 05       	cpc	r22, r1
    1560:	71 05       	cpc	r23, r1
    1562:	19 f4       	brne	.+6      	; 0x156a <__unpack_f+0xb4>
    1564:	84 e0       	ldi	r24, 0x04	; 4
    1566:	8c 93       	st	X, r24
    1568:	08 95       	ret
    156a:	64 ff       	sbrs	r22, 4
    156c:	03 c0       	rjmp	.+6      	; 0x1574 <__unpack_f+0xbe>
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	8c 93       	st	X, r24
    1572:	12 c0       	rjmp	.+36     	; 0x1598 <__unpack_f+0xe2>
    1574:	1c 92       	st	X, r1
    1576:	10 c0       	rjmp	.+32     	; 0x1598 <__unpack_f+0xe2>
    1578:	2f 57       	subi	r18, 0x7F	; 127
    157a:	30 40       	sbci	r19, 0x00	; 0
    157c:	13 96       	adiw	r26, 0x03	; 3
    157e:	3c 93       	st	X, r19
    1580:	2e 93       	st	-X, r18
    1582:	12 97       	sbiw	r26, 0x02	; 2
    1584:	83 e0       	ldi	r24, 0x03	; 3
    1586:	8c 93       	st	X, r24
    1588:	87 e0       	ldi	r24, 0x07	; 7
    158a:	44 0f       	add	r20, r20
    158c:	55 1f       	adc	r21, r21
    158e:	66 1f       	adc	r22, r22
    1590:	77 1f       	adc	r23, r23
    1592:	8a 95       	dec	r24
    1594:	d1 f7       	brne	.-12     	; 0x158a <__unpack_f+0xd4>
    1596:	70 64       	ori	r23, 0x40	; 64
    1598:	14 96       	adiw	r26, 0x04	; 4
    159a:	4d 93       	st	X+, r20
    159c:	5d 93       	st	X+, r21
    159e:	6d 93       	st	X+, r22
    15a0:	7c 93       	st	X, r23
    15a2:	17 97       	sbiw	r26, 0x07	; 7
    15a4:	08 95       	ret

000015a6 <__fpcmp_parts_f>:
    15a6:	1f 93       	push	r17
    15a8:	dc 01       	movw	r26, r24
    15aa:	fb 01       	movw	r30, r22
    15ac:	9c 91       	ld	r25, X
    15ae:	92 30       	cpi	r25, 0x02	; 2
    15b0:	08 f4       	brcc	.+2      	; 0x15b4 <__fpcmp_parts_f+0xe>
    15b2:	47 c0       	rjmp	.+142    	; 0x1642 <__fpcmp_parts_f+0x9c>
    15b4:	80 81       	ld	r24, Z
    15b6:	82 30       	cpi	r24, 0x02	; 2
    15b8:	08 f4       	brcc	.+2      	; 0x15bc <__fpcmp_parts_f+0x16>
    15ba:	43 c0       	rjmp	.+134    	; 0x1642 <__fpcmp_parts_f+0x9c>
    15bc:	94 30       	cpi	r25, 0x04	; 4
    15be:	51 f4       	brne	.+20     	; 0x15d4 <__fpcmp_parts_f+0x2e>
    15c0:	11 96       	adiw	r26, 0x01	; 1
    15c2:	1c 91       	ld	r17, X
    15c4:	84 30       	cpi	r24, 0x04	; 4
    15c6:	99 f5       	brne	.+102    	; 0x162e <__fpcmp_parts_f+0x88>
    15c8:	81 81       	ldd	r24, Z+1	; 0x01
    15ca:	68 2f       	mov	r22, r24
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	61 1b       	sub	r22, r17
    15d0:	71 09       	sbc	r23, r1
    15d2:	3f c0       	rjmp	.+126    	; 0x1652 <__fpcmp_parts_f+0xac>
    15d4:	84 30       	cpi	r24, 0x04	; 4
    15d6:	21 f0       	breq	.+8      	; 0x15e0 <__fpcmp_parts_f+0x3a>
    15d8:	92 30       	cpi	r25, 0x02	; 2
    15da:	31 f4       	brne	.+12     	; 0x15e8 <__fpcmp_parts_f+0x42>
    15dc:	82 30       	cpi	r24, 0x02	; 2
    15de:	b9 f1       	breq	.+110    	; 0x164e <__fpcmp_parts_f+0xa8>
    15e0:	81 81       	ldd	r24, Z+1	; 0x01
    15e2:	88 23       	and	r24, r24
    15e4:	89 f1       	breq	.+98     	; 0x1648 <__fpcmp_parts_f+0xa2>
    15e6:	2d c0       	rjmp	.+90     	; 0x1642 <__fpcmp_parts_f+0x9c>
    15e8:	11 96       	adiw	r26, 0x01	; 1
    15ea:	1c 91       	ld	r17, X
    15ec:	11 97       	sbiw	r26, 0x01	; 1
    15ee:	82 30       	cpi	r24, 0x02	; 2
    15f0:	f1 f0       	breq	.+60     	; 0x162e <__fpcmp_parts_f+0x88>
    15f2:	81 81       	ldd	r24, Z+1	; 0x01
    15f4:	18 17       	cp	r17, r24
    15f6:	d9 f4       	brne	.+54     	; 0x162e <__fpcmp_parts_f+0x88>
    15f8:	12 96       	adiw	r26, 0x02	; 2
    15fa:	2d 91       	ld	r18, X+
    15fc:	3c 91       	ld	r19, X
    15fe:	13 97       	sbiw	r26, 0x03	; 3
    1600:	82 81       	ldd	r24, Z+2	; 0x02
    1602:	93 81       	ldd	r25, Z+3	; 0x03
    1604:	82 17       	cp	r24, r18
    1606:	93 07       	cpc	r25, r19
    1608:	94 f0       	brlt	.+36     	; 0x162e <__fpcmp_parts_f+0x88>
    160a:	28 17       	cp	r18, r24
    160c:	39 07       	cpc	r19, r25
    160e:	bc f0       	brlt	.+46     	; 0x163e <__fpcmp_parts_f+0x98>
    1610:	14 96       	adiw	r26, 0x04	; 4
    1612:	8d 91       	ld	r24, X+
    1614:	9d 91       	ld	r25, X+
    1616:	0d 90       	ld	r0, X+
    1618:	bc 91       	ld	r27, X
    161a:	a0 2d       	mov	r26, r0
    161c:	24 81       	ldd	r18, Z+4	; 0x04
    161e:	35 81       	ldd	r19, Z+5	; 0x05
    1620:	46 81       	ldd	r20, Z+6	; 0x06
    1622:	57 81       	ldd	r21, Z+7	; 0x07
    1624:	28 17       	cp	r18, r24
    1626:	39 07       	cpc	r19, r25
    1628:	4a 07       	cpc	r20, r26
    162a:	5b 07       	cpc	r21, r27
    162c:	18 f4       	brcc	.+6      	; 0x1634 <__fpcmp_parts_f+0x8e>
    162e:	11 23       	and	r17, r17
    1630:	41 f0       	breq	.+16     	; 0x1642 <__fpcmp_parts_f+0x9c>
    1632:	0a c0       	rjmp	.+20     	; 0x1648 <__fpcmp_parts_f+0xa2>
    1634:	82 17       	cp	r24, r18
    1636:	93 07       	cpc	r25, r19
    1638:	a4 07       	cpc	r26, r20
    163a:	b5 07       	cpc	r27, r21
    163c:	40 f4       	brcc	.+16     	; 0x164e <__fpcmp_parts_f+0xa8>
    163e:	11 23       	and	r17, r17
    1640:	19 f0       	breq	.+6      	; 0x1648 <__fpcmp_parts_f+0xa2>
    1642:	61 e0       	ldi	r22, 0x01	; 1
    1644:	70 e0       	ldi	r23, 0x00	; 0
    1646:	05 c0       	rjmp	.+10     	; 0x1652 <__fpcmp_parts_f+0xac>
    1648:	6f ef       	ldi	r22, 0xFF	; 255
    164a:	7f ef       	ldi	r23, 0xFF	; 255
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <__fpcmp_parts_f+0xac>
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	cb 01       	movw	r24, r22
    1654:	1f 91       	pop	r17
    1656:	08 95       	ret

00001658 <__divmodhi4>:
    1658:	97 fb       	bst	r25, 7
    165a:	09 2e       	mov	r0, r25
    165c:	07 26       	eor	r0, r23
    165e:	0a d0       	rcall	.+20     	; 0x1674 <__divmodhi4_neg1>
    1660:	77 fd       	sbrc	r23, 7
    1662:	04 d0       	rcall	.+8      	; 0x166c <__divmodhi4_neg2>
    1664:	0c d0       	rcall	.+24     	; 0x167e <__udivmodhi4>
    1666:	06 d0       	rcall	.+12     	; 0x1674 <__divmodhi4_neg1>
    1668:	00 20       	and	r0, r0
    166a:	1a f4       	brpl	.+6      	; 0x1672 <__divmodhi4_exit>

0000166c <__divmodhi4_neg2>:
    166c:	70 95       	com	r23
    166e:	61 95       	neg	r22
    1670:	7f 4f       	sbci	r23, 0xFF	; 255

00001672 <__divmodhi4_exit>:
    1672:	08 95       	ret

00001674 <__divmodhi4_neg1>:
    1674:	f6 f7       	brtc	.-4      	; 0x1672 <__divmodhi4_exit>
    1676:	90 95       	com	r25
    1678:	81 95       	neg	r24
    167a:	9f 4f       	sbci	r25, 0xFF	; 255
    167c:	08 95       	ret

0000167e <__udivmodhi4>:
    167e:	aa 1b       	sub	r26, r26
    1680:	bb 1b       	sub	r27, r27
    1682:	51 e1       	ldi	r21, 0x11	; 17
    1684:	07 c0       	rjmp	.+14     	; 0x1694 <__udivmodhi4_ep>

00001686 <__udivmodhi4_loop>:
    1686:	aa 1f       	adc	r26, r26
    1688:	bb 1f       	adc	r27, r27
    168a:	a6 17       	cp	r26, r22
    168c:	b7 07       	cpc	r27, r23
    168e:	10 f0       	brcs	.+4      	; 0x1694 <__udivmodhi4_ep>
    1690:	a6 1b       	sub	r26, r22
    1692:	b7 0b       	sbc	r27, r23

00001694 <__udivmodhi4_ep>:
    1694:	88 1f       	adc	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	5a 95       	dec	r21
    169a:	a9 f7       	brne	.-22     	; 0x1686 <__udivmodhi4_loop>
    169c:	80 95       	com	r24
    169e:	90 95       	com	r25
    16a0:	bc 01       	movw	r22, r24
    16a2:	cd 01       	movw	r24, r26
    16a4:	08 95       	ret

000016a6 <__prologue_saves__>:
    16a6:	2f 92       	push	r2
    16a8:	3f 92       	push	r3
    16aa:	4f 92       	push	r4
    16ac:	5f 92       	push	r5
    16ae:	6f 92       	push	r6
    16b0:	7f 92       	push	r7
    16b2:	8f 92       	push	r8
    16b4:	9f 92       	push	r9
    16b6:	af 92       	push	r10
    16b8:	bf 92       	push	r11
    16ba:	cf 92       	push	r12
    16bc:	df 92       	push	r13
    16be:	ef 92       	push	r14
    16c0:	ff 92       	push	r15
    16c2:	0f 93       	push	r16
    16c4:	1f 93       	push	r17
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	ca 1b       	sub	r28, r26
    16d0:	db 0b       	sbc	r29, r27
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	09 94       	ijmp

000016de <__epilogue_restores__>:
    16de:	2a 88       	ldd	r2, Y+18	; 0x12
    16e0:	39 88       	ldd	r3, Y+17	; 0x11
    16e2:	48 88       	ldd	r4, Y+16	; 0x10
    16e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    16e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    16e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    16ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    16ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    16ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    16f0:	b9 84       	ldd	r11, Y+9	; 0x09
    16f2:	c8 84       	ldd	r12, Y+8	; 0x08
    16f4:	df 80       	ldd	r13, Y+7	; 0x07
    16f6:	ee 80       	ldd	r14, Y+6	; 0x06
    16f8:	fd 80       	ldd	r15, Y+5	; 0x05
    16fa:	0c 81       	ldd	r16, Y+4	; 0x04
    16fc:	1b 81       	ldd	r17, Y+3	; 0x03
    16fe:	aa 81       	ldd	r26, Y+2	; 0x02
    1700:	b9 81       	ldd	r27, Y+1	; 0x01
    1702:	ce 0f       	add	r28, r30
    1704:	d1 1d       	adc	r29, r1
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	cd bf       	out	0x3d, r28	; 61
    1710:	ed 01       	movw	r28, r26
    1712:	08 95       	ret

00001714 <__eerd_byte_m168>:
    1714:	f9 99       	sbic	0x1f, 1	; 31
    1716:	fe cf       	rjmp	.-4      	; 0x1714 <__eerd_byte_m168>
    1718:	92 bd       	out	0x22, r25	; 34
    171a:	81 bd       	out	0x21, r24	; 33
    171c:	f8 9a       	sbi	0x1f, 0	; 31
    171e:	99 27       	eor	r25, r25
    1720:	80 b5       	in	r24, 0x20	; 32
    1722:	08 95       	ret

00001724 <__eewr_byte_m168>:
    1724:	26 2f       	mov	r18, r22

00001726 <__eewr_r18_m168>:
    1726:	f9 99       	sbic	0x1f, 1	; 31
    1728:	fe cf       	rjmp	.-4      	; 0x1726 <__eewr_r18_m168>
    172a:	1f ba       	out	0x1f, r1	; 31
    172c:	92 bd       	out	0x22, r25	; 34
    172e:	81 bd       	out	0x21, r24	; 33
    1730:	20 bd       	out	0x20, r18	; 32
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	fa 9a       	sbi	0x1f, 2	; 31
    1738:	f9 9a       	sbi	0x1f, 1	; 31
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	01 96       	adiw	r24, 0x01	; 1
    173e:	08 95       	ret

00001740 <_exit>:
    1740:	f8 94       	cli

00001742 <__stop_program>:
    1742:	ff cf       	rjmp	.-2      	; 0x1742 <__stop_program>
